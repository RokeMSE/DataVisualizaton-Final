import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import plotly.express as px
from matplotlib.backends.backend_pdf import PdfPages
from io import BytesIO
import csv
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from collections import Counter
import re

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(page_title="Ph√¢n T√≠ch Tuy·ªÉn D·ª•ng Vi·ªát Nam", page_icon="üíº", layout="wide", initial_sidebar_state="expanded")

# Thi·∫øt l·∫≠p b·∫£ng m√†u
sns.set_palette("colorblind")
PALETTE = ["#88CCEE", "#44AA99", "#117733", "#999933", "#DDCC77", "#CC6677", "#882255", "#AA4499"]

# --- H√†m t·∫°o PDF t·ª´ figure ---
def save_fig_to_pdf(fig):
    buffer = BytesIO()
    with PdfPages(buffer) as pdf:
        pdf.savefig(fig, bbox_inches='tight')
    buffer.seek(0)
    return buffer

# --- H√†m t·∫£i v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ---
@st.cache_data(show_spinner=False)
def load_and_preprocess_data(file):
    try:
        df = pd.read_csv(file, encoding='utf-8', quoting=csv.QUOTE_ALL, na_values=["None", " ", "UNKNOWN", -1, 999, "NA", "N/A", "NULL"])
        numeric_cols = ['min_salary_mil_vnd', 'max_salary_mil_vnd', 'min_experience_years', 'max_experience_years']
        for col in numeric_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        categorical_cols = ['primary_location', 'primary_category', 'position', 'order']
        for col in categorical_cols:
            df[col] = df[col].astype('category')
        # ƒê·∫£m b·∫£o c·ªôt job_requirements l√† chu·ªói
        if 'job_requirements' in df.columns:
            df['job_requirements'] = df['job_requirements'].astype(str).fillna('')
        return df
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")
        st.stop()

# --- H√†m d·ª± ƒëo√°n l∆∞∆°ng ---
def predict_salary(df):
    # Ch·ªçn c√°c ƒë·∫∑c tr∆∞ng v√† m·ª•c ti√™u
    features = ['min_experience_years', 'primary_category', 'primary_location']
    target = 'min_salary_mil_vnd'
    
    # L·ªçc d·ªØ li·ªáu
    df_model = df[features + [target]].dropna()
    if df_model.empty:
        return None, None, None
    
    X = df_model[features]
    y = df_model[target]
    
    # Chia d·ªØ li·ªáu th√†nh t·∫≠p hu·∫•n luy·ªán v√† ki·ªÉm tra
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # T·∫°o pipeline v·ªõi m√£ h√≥a one-hot cho c√°c c·ªôt ph√¢n lo·∫°i
    preprocessor = ColumnTransformer(
        transformers=[
            ('cat', OneHotEncoder(handle_unknown='ignore'), ['primary_category', 'primary_location']),
            ('num', 'passthrough', ['min_experience_years'])
        ])
    
    model = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('regressor', LinearRegression())
    ])
    
    # Hu·∫•n luy·ªán m√¥ h√¨nh
    model.fit(X_train, y_train)
    
    # D·ª± ƒëo√°n tr√™n t·∫≠p ki·ªÉm tra
    y_pred = model.predict(X_test)
    
    # T·∫°o DataFrame cho k·∫øt qu·∫£
    results = pd.DataFrame({
        'Actual': y_test,
        'Predicted': y_pred
    })
    
    return model, results, X_test

# --- H√†m tr√≠ch xu·∫•t k·ªπ nƒÉng ---
def extract_skills(df):
    # Danh s√°ch k·ªπ nƒÉng ph·ªï bi·∫øn (c√≥ th·ªÉ m·ªü r·ªông)
    skills_list = [
        'python', 'sql', 'java', 'javascript', 'aws', 'docker', 'kubernetes',
        'excel', 'power bi', 'tableau', 'management', 'communication', 'leadership',
        'marketing', 'sales', 'finance', 'accounting', 'design', 'ui/ux'
    ]
    
    # G·ªôp t·∫•t c·∫£ job_requirements th√†nh m·ªôt vƒÉn b·∫£n
    text = ' '.join(df['job_requirements'].str.lower())
    
    # T√¨m c√°c k·ªπ nƒÉng trong vƒÉn b·∫£n
    skill_counts = Counter()
    for skill in skills_list:
        count = len(re.findall(r'\b' + re.escape(skill) + r'\b', text))
        if count > 0:
            skill_counts[skill] = count
    
    # L·∫•y top 10 k·ªπ nƒÉng
    top_skills = skill_counts.most_common(10)
    return pd.DataFrame(top_skills, columns=['Skill', 'Count'])

# --- H√†m v·∫Ω ph√¢n ph·ªëi m·ª©c l∆∞∆°ng theo danh m·ª•c ---
def plot_salary_by_category(df, chart_type='Box'):
    filtered_df = df[['primary_category', 'min_salary_mil_vnd']].dropna()
    top_categories = filtered_df['primary_category'].value_counts().index[:10]
    filtered_df = filtered_df[filtered_df['primary_category'].isin(top_categories)]
    
    if chart_type == 'Box':
        fig, ax = plt.subplots(figsize=(12, 7))
        sns.boxplot(x='min_salary_mil_vnd', y='primary_category', data=filtered_df, palette=PALETTE, ax=ax)
        ax.set_title('Ph√¢n ph·ªëi M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu theo Danh m·ª•c C√¥ng vi·ªác', fontsize=14, pad=15)
        ax.set_xlabel('M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu (Tri·ªáu VND)', fontsize=12)
        ax.set_ylabel('Danh m·ª•c C√¥ng vi·ªác', fontsize=12)
        plt.tight_layout()
    else:
        fig, axes = plt.subplots(2, 5, figsize=(20, 10))
        axes = axes.flatten()
        for idx, category in enumerate(top_categories):
            if idx < len(axes):
                sns.histplot(filtered_df[filtered_df['primary_category'] == category]['min_salary_mil_vnd'], 
                             kde=True, ax=axes[idx], color=PALETTE[idx % len(PALETTE)])
                axes[idx].set_title(f'{category}', fontsize=10)
                axes[idx].set_xlabel('M·ª©c l∆∞∆°ng (Tri·ªáu VND)')
                axes[idx].set_ylabel('S·ªë l∆∞·ª£ng')
        for idx in range(len(top_categories), len(axes)):
            axes[idx].axis('off')
        plt.suptitle('Ph√¢n ph·ªëi M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu theo Danh m·ª•c', fontsize=14, y=1.05)
        plt.tight_layout()
    
    return fig

# --- H√†m v·∫Ω ·∫£nh h∆∞·ªüng c·ªßa kinh nghi·ªám ƒë·∫øn m·ª©c l∆∞∆°ng ---
def plot_experience_salary(df, chart_type='Box'):
    filtered_df = df[['min_experience_years', 'min_salary_mil_vnd']].dropna()
    filtered_df = filtered_df.replace([np.inf, -np.inf], np.nan).dropna()
    filtered_df = filtered_df[filtered_df['min_experience_years'] <= 5]
    
    if chart_type == 'Box':
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.boxplot(x='min_experience_years', y='min_salary_mil_vnd', data=filtered_df, palette="coolwarm", ax=ax)
        ax.set_title('Ph√¢n ph·ªëi M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu theo Kinh nghi·ªám (0-5 NƒÉm)', fontsize=14, pad=15)
        ax.set_xlabel('Kinh nghi·ªám T·ªëi thi·ªÉu (NƒÉm)', fontsize=12)
        ax.set_ylabel('M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu (Tri·ªáu VND)', fontsize=12)
        plt.tight_layout()
    else:
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.scatterplot(x='min_experience_years', y='min_salary_mil_vnd', data=filtered_df, 
                        color=PALETTE[0], alpha=0.5, ax=ax)
        ax.set_title('M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu theo Kinh nghi·ªám (0-5 NƒÉm)', fontsize=14, pad=15)
        ax.set_xlabel('Kinh nghi·ªám T·ªëi thi·ªÉu (NƒÉm)', fontsize=12)
        ax.set_ylabel('M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu (Tri·ªáu VND)', fontsize=12)
        plt.tight_layout()
    
    return fig

# --- T·∫£i d·ªØ li·ªáu t·ª´ ng∆∞·ªùi d√πng ---
st.sidebar.header("T·∫£i D·ªØ Li·ªáu")
uploaded_file = st.sidebar.file_uploader("T·∫£i l√™n t·ªáp CSV", type=["csv"])
if uploaded_file is not None:
    df = load_and_preprocess_data(uploaded_file)
else:
    st.warning("Vui l√≤ng t·∫£i l√™n t·ªáp CSV ƒë·ªÉ ti·∫øp t·ª•c.")
    st.stop()

# --- CSS ---
st.markdown("""
    <style>
    div[role="radiogroup"] label {
        display: flex;
        align-items: center;
        font-size: 18px;
        font-weight: bold;
        color: #333;
        padding: 10px 15px;
        border-radius: 8px;
        transition: background-color 0.3s ease, transform 0.2s ease;
        cursor: pointer;
    }
    div[role="radiogroup"] label span {
        visibility: hidden;
        width: 0;
        margin: 0;
        padding: 0;
    }
    div[role="radiogroup"] label:hover {
        background-color: #FF851B;
        color: white !important;
        transform: scale(1.02);
    }
    div[role="radiogroup"] label[data-selected="true"] {
        background-color: #FF851B !important;
        color: white !important;
        font-weight: bold;
    }
    </style>
""", unsafe_allow_html=True)

st.title("üíº B·∫£ng ƒêi·ªÅu Khi·ªÉn Ph√¢n T√≠ch Tuy·ªÉn D·ª•ng Vi·ªát Nam")
page = st.sidebar.radio("Ch·ªçn Trang", [
    "1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu",
    "2. Th·ªëng K√™ M√¥ T·∫£",
    "3. Ph√¢n T√≠ch Chuy√™n S√¢u",
    "4. Nh·∫≠n X√©t Chung",
], index=0)

# --- Trang 1: Gi·ªõi Thi·ªáu D·ªØ Li·ªáu ---
if page == "1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu":
    st.header("üìä 1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu")

    st.markdown("""
        <style>
        .highlight {
            color: #FF851B;
            font-weight: bold;
        }
        </style>
    """, unsafe_allow_html=True)

    tab1, tab2 = st.tabs(["üìú Ngu·ªìn G·ªëc D·ªØ Li·ªáu", "üìã M√¥ T·∫£ D·ªØ Li·ªáu"])

    with tab1:
        st.subheader("Ngu·ªìn G·ªëc D·ªØ Li·ªáu")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(label="S·ªë B·∫£n Ghi Ban ƒê·∫ßu", value="2056", delta=None)
        with col2:
            st.metric(label="S·ªë B·∫£n Ghi Sau X·ª≠ L√Ω", value="1945", delta="-111", delta_color="inverse")
        with col3:
            st.metric(label="Th·ªùi Gian Thu Th·∫≠p", value="02/2023 - 03/2023", delta=None)

        st.markdown("""
        - D·ªØ li·ªáu ƒë∆∞·ª£c thu th·∫≠p t·ª´ c√°c b√†i ƒëƒÉng tuy·ªÉn d·ª•ng tr√™n trang web <span class="highlight">CareerBuilder.vn</span>.
        - D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch ƒë·ªÉ lo·∫°i b·ªè HTML, c√°c c·ª•m t·ª´ kh√¥ng mong mu·ªën, v√† x·ª≠ l√Ω c√°c c·ªôt nh∆∞ m·ª©c l∆∞∆°ng, kinh nghi·ªám, v√† ƒë·ªãa ƒëi·ªÉm.
        """, unsafe_allow_html=True)

    with tab2:
        st.subheader("M√¥ T·∫£ D·ªØ Li·ªáu")

        with st.expander("üìù Xem Chi Ti·∫øt C√°c C·ªôt D·ªØ Li·ªáu"):
            st.markdown("""
            - **job_title:** T√™n v·ªã tr√≠ tuy·ªÉn d·ª•ng.
            - **job_id:** M√£ ƒë·ªãnh danh duy nh·∫•t cho b√†i ƒëƒÉng.
            - **company_title:** T√™n c√¥ng ty tuy·ªÉn d·ª•ng.
            - **salary:** M·ª©c l∆∞∆°ng (ƒë√£ x·ª≠ l√Ω th√†nh min_salary_mil_vnd v√† max_salary_mil_vnd, ƒë∆°n v·ªã tri·ªáu VND).
            - **location:** ƒê·ªãa ƒëi·ªÉm l√†m vi·ªác (ƒë√£ x·ª≠ l√Ω th√†nh primary_location).
            - **outstanding_welfare:** Quy·ªÅn l·ª£i n·ªïi b·∫≠t.
            - **category:** Danh m·ª•c c√¥ng vi·ªác (ƒë√£ x·ª≠ l√Ω th√†nh primary_category).
            - **position:** C·∫•p b·∫≠c v·ªã tr√≠.
            - **exp:** Kinh nghi·ªám y√™u c·∫ßu (ƒë√£ x·ª≠ l√Ω th√†nh min_experience_years v√† max_experience_years).
            - **order:** Lo·∫°i h·ª£p ƒë·ªìng.
            - **detailed_welfare:** Quy·ªÅn l·ª£i chi ti·∫øt.
            - **job_description:** M√¥ t·∫£ c√¥ng vi·ªác.
            - **job_requirements:** Y√™u c·∫ßu c√¥ng vi·ªác.
            - **job_tags:** T·ª´ kh√≥a li√™n quan ƒë·∫øn c√¥ng vi·ªác.
            - **primary_location:** ƒê·ªãa ƒëi·ªÉm l√†m vi·ªác ch√≠nh.
            - **primary_category:** Danh m·ª•c c√¥ng vi·ªác ch√≠nh.
            """)

        buffer = BytesIO()
        with PdfPages(buffer) as pdf:
            fig, ax = plt.subplots(figsize=(8, 6))
            ax.text(0.5, 0.5, "C·∫•u tr√∫c d·ªØ li·ªáu:\n\n" + 
                    "job_title: T√™n v·ªã tr√≠\n" +
                    "job_id: M√£ ƒë·ªãnh danh\n" +
                    "company_title: T√™n c√¥ng ty\n" +
                    "... (xem chi ti·∫øt trong dashboard)", 
                    ha='center', va='center', fontsize=12)
            ax.axis('off')
            pdf.savefig(fig, bbox_inches='tight')
            plt.close(fig)
        buffer.seek(0)
        st.download_button(
            label="üì• T·∫£i Xu·ªëng C·∫•u Tr√∫c D·ªØ Li·ªáu (PDF)",
            data=buffer,
            file_name="cau_truc_du_lieu.pdf",
            mime="application/pdf"
        )

    st.subheader("üóÇ Xem D·ªØ Li·ªáu ƒê√£ X·ª≠ L√Ω")
    st.dataframe(df.style.set_properties(**{
        'background-color': '#f9f9f9',
        'border': '1px solid #e0e0e0',
        'padding': '5px',
        'text-align': 'left'
    }), height=300)

# --- Trang 2: Th·ªëng K√™ M√¥ T·∫£ ---
elif page == "2. Th·ªëng K√™ M√¥ T·∫£":
    st.header("üìà 2. Th·ªëng K√™ M√¥ T·∫£")

    st.markdown("""
        <style>
        .section-title {
            font-size: 24px;
            font-weight: 500;
            margin-bottom: 15px;
            color: #333333;
        }
        .chart-title {
            font-size: 18px;
            font-weight: bold;
            color: #FF851B;
            margin-bottom: 10px;
        }
        .debug-expander {
            background-color: #f9f9f9;
            padding: 10px;
            border-radius: 5px;
        }
        </style>
    """, unsafe_allow_html=True)

    tab1, tab2, tab3 = st.tabs(["üìä Th√¥ng Tin D·ªØ Li·ªáu", "üìà Ph√¢n Ph·ªëi Bi·∫øn S·ªë", "üìâ Ph√¢n Ph·ªëi Bi·∫øn Ph√¢n Lo·∫°i"])

    with tab1:
        st.markdown('<div class="section-title">Th√¥ng Tin D·ªØ Li·ªáu</div>', unsafe_allow_html=True)
        st.dataframe(df.describe(include='all').style.set_properties(**{
            'background-color': '#ffffff',
            'border': '1px solid #e0e0e0',
            'padding': '5px',
            'text-align': 'left'
        }), height=300)

    with tab2:
        st.markdown('<div class="section-title">Ph√¢n Ph·ªëi Bi·∫øn S·ªë</div>', unsafe_allow_html=True)
        numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
        num_select = st.selectbox("Ch·ªçn m·ªôt bi·∫øn s·ªë ƒë·ªÉ xem ph√¢n ph·ªëi:", numeric_cols)
        if num_select:
            chart_type = st.radio("Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:", ["Histogram (v·ªõi KDE)", "Boxplot", "KDE Plot"])
            st.markdown('<div class="chart-title">Bi·ªÉu ƒê·ªì Ph√¢n Ph·ªëi</div>', unsafe_allow_html=True)
            fig, ax = plt.subplots(figsize=(14, 7))

            if chart_type == "Histogram (v·ªõi KDE)":
                sns.histplot(df[num_select].dropna(), kde=True, color=PALETTE[0], ax=ax)
                ax.set_title(f"Ph√¢n b·ªë c·ªßa {num_select} (Histogram v·ªõi KDE)", fontsize=14, pad=15)
            elif chart_type == "Boxplot":
                sns.boxplot(y=df[num_select].dropna(), color=PALETTE[1], ax=ax)
                ax.set_title(f"Ph√¢n b·ªë c·ªßa {num_select} (Boxplot)", fontsize=14, pad=15)
            elif chart_type == "KDE Plot":
                sns.kdeplot(df[num_select].dropna(), color=PALETTE[2], fill=True, ax=ax)
                ax.set_title(f"Ph√¢n b·ªë c·ªßa {num_select} (KDE Plot)", fontsize=14, pad=15)

            ax.set_xlabel(num_select, fontsize=12)
            ax.set_ylabel('S·ªë l∆∞·ª£ng' if chart_type != "Boxplot" else '', fontsize=12)
            plt.tight_layout()
            st.pyplot(fig)
            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                data=pdf_buffer,
                file_name=f"PhanBo_{num_select}_{chart_type}.pdf",
                mime="application/pdf"
            )

        with st.expander("üí° Nh·∫≠n X√©t V·ªÅ Th·ªëng K√™ M√¥ T·∫£"):
            st.markdown("""
            - **M·ª©c l∆∞∆°ng (min_salary_mil_vnd, max_salary_mil_vnd):** M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu v√† t·ªëi ƒëa trung b√¨nh, ph·∫°m vi l∆∞∆°ng, v√† ph√¢n ph·ªëi (tri·ªáu VND).
            - **Kinh nghi·ªám (min_experience_years, max_experience_years):** S·ªë nƒÉm kinh nghi·ªám y√™u c·∫ßu trung b√¨nh v√† ph√¢n ph·ªëi.
            - **ƒê·ªãa ƒëi·ªÉm (primary_location):** C√°c ƒë·ªãa ƒëi·ªÉm ph·ªï bi·∫øn nh·∫•t (v√≠ d·ª•: TP.HCM, H√† N·ªôi).
            - **Danh m·ª•c (primary_category):** C√°c danh m·ª•c c√¥ng vi·ªác ph·ªï bi·∫øn (v√≠ d·ª•: IT, Kinh doanh).
            """)

    with tab3:
        st.markdown('<div class="section-title">Ph√¢n Ph·ªëi Bi·∫øn Ph√¢n Lo·∫°i</div>', unsafe_allow_html=True)

        st.markdown('<div class="filter-box">', unsafe_allow_html=True)
        unique_locations = df['primary_location'].dropna().unique().tolist()
        selected_locations = st.multiselect(
            "üìç L·ªçc theo ƒë·ªãa ƒëi·ªÉm:",
            options=unique_locations,
            default=unique_locations,
            key="filter_locations_categorical"
        )
        st.markdown('</div>', unsafe_allow_html=True)

        filtered_df = df.copy()
        if selected_locations:
            filtered_df = filtered_df[filtered_df['primary_location'].isin(selected_locations)]

        if filtered_df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi l·ªçc. Vui l√≤ng ch·ªçn l·∫°i ƒë·ªãa ƒëi·ªÉm.")
        else:
            cat_cols = ['order', 'position', 'primary_category']
            cat_select = st.selectbox("Ch·ªçn m·ªôt bi·∫øn ph√¢n lo·∫°i ƒë·ªÉ xem ph√¢n ph·ªëi:", cat_cols)

            if cat_select:
                grouped = filtered_df.groupby('primary_location')[cat_select].value_counts().unstack(fill_value=0)
                grouped = grouped.reindex(selected_locations)
                
                fig, ax = plt.subplots(figsize=(20, 16))
                grouped.plot(kind='bar', stacked=True, ax=ax, colormap='tab20')
                ax.set_title(f"Ph√¢n Ph·ªëi '{cat_select}' Theo ƒê·ªãa ƒêi·ªÉm ƒê√£ Ch·ªçn", fontsize=16, pad=10)
                ax.set_xlabel("ƒê·ªãa ƒëi·ªÉm", fontsize=14)
                ax.set_ylabel("S·ªë l∆∞·ª£ng", fontsize=14)
                plt.xticks(rotation=90, ha='right')
                plt.tight_layout()
                st.pyplot(fig)

                pdf_buffer = save_fig_to_pdf(fig)
                st.download_button(
                    label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                    data=pdf_buffer,
                    file_name=f"PhanBo_{cat_select}_TheoDiaDiem.pdf",
                    mime="application/pdf"
                )

# --- Trang 3: Ph√¢n T√≠ch Chuy√™n S√¢u ---
elif page == "3. Ph√¢n T√≠ch Chuy√™n S√¢u":
    st.header("üîç 3. Ph√¢n T√≠ch Chuy√™n S√¢u")

    st.markdown("""
        <style>
        .section-title {
            font-size: 24px;
            font-weight: 500;
            margin-bottom: 15px;
            color: #333333;
        }
        .chart-title {
            font-size: 18px;
            font-weight: bold;
            color: #FF851B;
            margin-bottom: 10px;
        }
        .filter-box {
            background-color: #f9f9f9;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 15px;
        }
        </style>
    """, unsafe_allow_html=True)

    tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8 = st.tabs([
        "üìä Th·ªëng K√™ Chung",
        "üí∞ M·ª©c L∆∞∆°ng Theo Danh M·ª•c",
        "üïí Kinh Nghi·ªám & M·ª©c L∆∞∆°ng",
        "üìç Ph√¢n B·ªë ƒê·ªãa ƒêi·ªÉm",
        "üîó T∆∞∆°ng Quan",
        "üìà Ph√¢n T√≠ch Song Bi·∫øn",
        "üìà Xu H∆∞·ªõng Theo Th·ªùi Gian",
        "ü§ñ Ph√¢n T√≠ch AI"
    ])

    with tab1:
        total_jobs = len(df)
        avg_min_salary = df["min_salary_mil_vnd"].mean()
        avg_max_salary = df["max_salary_mil_vnd"].mean()
        top_location = df["primary_location"].mode()[0] if not df["primary_location"].empty else "N/A"
        top_category = df["primary_category"].mode()[0] if not df["primary_category"].empty else "N/A"
        location_percentage = (df["primary_location"] == top_location).mean() * 100
        total_categories = df["primary_category"].nunique()
        total_locations = df["primary_location"].nunique()
        max_min_salary = df["min_salary_mil_vnd"].max()
        max_max_salary = df["max_salary_mil_vnd"].max()
        highest_salary_category = df.groupby("primary_category")["min_salary_mil_vnd"].mean().idxmax()

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("T·ªïng S·ªë B√†i ƒêƒÉng", total_jobs)
        with col2:
            st.metric("M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu TB", f"{avg_min_salary:.2f} tri·ªáu" if not pd.isna(avg_min_salary) else "N/A")
        with col3:
            st.metric("M·ª©c L∆∞∆°ng T·ªëi ƒêa TB", f"{avg_max_salary:.2f} tri·ªáu" if not pd.isna(avg_max_salary) else "N/A")
        with col4:
            st.metric("ƒê·ªãa ƒêi·ªÉm Ph·ªï Bi·∫øn Nh·∫•t", top_location)

        col5, col6, col7, col8 = st.columns(4)
        with col5:
            st.metric("Danh M·ª•c Ph·ªï Bi·∫øn Nh·∫•t", top_category)
        with col6:
            st.metric("T·ªïng S·ªë Danh M·ª•c", total_categories)
        with col7:
            st.metric("T·ªïng S·ªë ƒê·ªãa ƒêi·ªÉm", total_locations)
        with col8:
            st.metric("ƒê·ªãa ƒêi·ªÉm Ph·ªï Bi·∫øn (%)", f"{location_percentage:.2f}%")

        col9, col10 = st.columns(2)
        with col9:
            st.metric("M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu Cao Nh·∫•t", f"{max_min_salary:.2f} tri·ªáu" if not pd.isna(max_min_salary) else "N/A")
        with col10:
            st.metric("Danh M·ª•c L∆∞∆°ng Cao Nh·∫•t", highest_salary_category)

    with tab2:
        st.markdown('<div class="section-title">M·ª©c L∆∞∆°ng Theo Danh M·ª•c C√¥ng Vi·ªác</div>', unsafe_allow_html=True)
        
        st.markdown('<div class="filter-box">', unsafe_allow_html=True)
        categories = df['primary_category'].unique().tolist()
        selected_categories = st.multiselect(
            "Ch·ªçn c√°c danh m·ª•c c√¥ng vi·ªác (b·ªè tr·ªëng ƒë·ªÉ ch·ªçn t·∫•t c·∫£):",
            options=categories,
            default=categories,
            key="filter_categories_salary"
        )
        min_salary_range = st.slider(
            "Ch·ªçn kho·∫£ng m·ª©c l∆∞∆°ng t·ªëi thi·ªÉu (tri·ªáu VND):",
            min_value=float(df['min_salary_mil_vnd'].min()),
            max_value=float(df['min_salary_mil_vnd'].max()),
            value=(float(df['min_salary_mil_vnd'].min()), float(df['min_salary_mil_vnd'].max())),
            step=1.0
        )

        y_axis_value = st.selectbox(
            "Ch·ªçn gi√° tr·ªã tr√™n tr·ª•c Y:",
            ["S·ªë l∆∞·ª£ng b√†i ƒëƒÉng", "M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu trung b√¨nh", "M·ª©c l∆∞∆°ng t·ªëi ƒëa trung b√¨nh"],
            key="y_axis_salary"
        )
        st.markdown('</div>', unsafe_allow_html=True)

        filtered_df = df.copy()
        if selected_categories:
            filtered_df = filtered_df[filtered_df['primary_category'].isin(selected_categories)]
        filtered_df = filtered_df[
            (filtered_df['min_salary_mil_vnd'] >= min_salary_range[0]) &
            (filtered_df['min_salary_mil_vnd'] <= min_salary_range[1])
        ]

        chart_type = st.radio("Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:", ["Box", "Histogram"])
        st.markdown('<div class="chart-title">Bi·ªÉu ƒê·ªì Ph√¢n T√≠ch</div>', unsafe_allow_html=True)
        
        if y_axis_value == "S·ªë l∆∞·ª£ng b√†i ƒëƒÉng":
            if chart_type == "Box":
                fig, ax = plt.subplots(figsize=(14, 8))
                sns.boxplot(x="primary_category", y="min_salary_mil_vnd", data=filtered_df, ax=ax, order=selected_categories if selected_categories else categories)
                ax.set_ylabel("M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu (tri·ªáu VND)", fontsize=12)
                ax.set_title("M·ª©c L∆∞∆°ng Theo Danh M·ª•c C√¥ng Vi·ªác (Boxplot)", fontsize=14, pad=15)
                ax.set_xlabel("Danh M·ª•c C√¥ng Vi·ªác", fontsize=12)
                plt.xticks(rotation=90)
                plt.tight_layout()
                st.pyplot(fig)
                pdf_buffer = save_fig_to_pdf(fig)
                st.download_button(
                    label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                    data=pdf_buffer,
                    file_name="Luong_Theo_DanhMuc_Box.pdf",
                    mime="application/pdf"
                )
            elif chart_type == "Histogram":
                unique_categories = filtered_df["primary_category"].unique()
                num_categories = len(unique_categories)
                if num_categories == 0:
                    st.warning("Kh√¥ng c√≥ danh m·ª•c n√†o ƒë·ªÉ hi·ªÉn th·ªã sau khi l·ªçc. Vui l√≤ng ki·ªÉm tra b·ªô l·ªçc.")
                else:
                    for i, category in enumerate(unique_categories):
                        st.markdown(f"**Histogram cho danh m·ª•c: {category}**", unsafe_allow_html=True)
                        fig, ax = plt.subplots(figsize=(14, 8))
                        sns.histplot(filtered_df[filtered_df["primary_category"] == category]["min_salary_mil_vnd"], kde=True, ax=ax, color=PALETTE[i % len(PALETTE)])
                        ax.set_title(f"Ph√¢n B·ªë M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu - {category}", fontsize=14, pad=15)
                        ax.set_xlabel("M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu (tri·ªáu VND)", fontsize=12)
                        ax.set_ylabel("S·ªë L∆∞·ª£ng B√†i ƒêƒÉng", fontsize=12)
                        plt.tight_layout()
                        st.pyplot(fig)
                        pdf_buffer = save_fig_to_pdf(fig)
                        st.download_button(
                            label=f"üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF ({category})",
                            data=pdf_buffer,
                            file_name=f"Luong_Theo_DanhMuc_Histogram_{category}.pdf",
                            mime="application/pdf"
                        )
        else:
            if y_axis_value == "M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu trung b√¨nh":
                grouped = filtered_df.groupby("primary_category")["min_salary_mil_vnd"].mean().reset_index()
                y_col = "min_salary_mil_vnd"
                y_label = "M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu Trung B√¨nh (tri·ªáu VND)"
            else:
                grouped = filtered_df.groupby("primary_category")["max_salary_mil_vnd"].mean().reset_index()
                y_col = "max_salary_mil_vnd"
                y_label = "M·ª©c L∆∞∆°ng T·ªëi ƒêa Trung B√¨nh (tri·ªáu VND)"
            
            fig, ax = plt.subplots(figsize=(14, 8))
            if chart_type == "Box":
                sns.barplot(x="primary_category", y=y_col, data=grouped, ax=ax, order=selected_categories if selected_categories else categories)
            elif chart_type == "Histogram":
                sns.histplot(grouped[y_col], kde=True, ax=ax)
            ax.set_title("M·ª©c L∆∞∆°ng Theo Danh M·ª•c C√¥ng Vi·ªác", fontsize=14, pad=15)
            ax.set_xlabel("Danh M·ª•c C√¥ng Vi·ªác", fontsize=12)
            ax.set_ylabel(y_label, fontsize=12)
            plt.xticks(rotation=90)
            plt.tight_layout()
            st.pyplot(fig)
            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                data=pdf_buffer,
                file_name=f"Luong_Theo_DanhMuc_{chart_type}.pdf",
                mime="application/pdf"
            )

        with st.expander("üí° Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
            st.markdown("""
            - **Bi·ªÉu ƒë·ªì Boxplot/Histogram:**
              - **Boxplot:** Th·ªÉ hi·ªán ph√¢n ph·ªëi m·ª©c l∆∞∆°ng t·ªëi thi·ªÉu theo danh m·ª•c c√¥ng vi·ªác. Trung v·ªã (ƒë∆∞·ªùng gi·ªØa h·ªôp) cho th·∫•y m·ª©c l∆∞∆°ng trung b√¨nh, IQR (ƒë·ªô cao h·ªôp) cho th·∫•y s·ª± bi·∫øn ƒë·ªông, v√† c√°c ƒëi·ªÉm ngo·∫°i lai cho th·∫•y c√°c m·ª©c l∆∞∆°ng b·∫•t th∆∞·ªùng.
              - **Histogram:** Th·ªÉ hi·ªán ph√¢n b·ªë chi ti·∫øt c·ªßa m·ª©c l∆∞∆°ng trong m·ªói danh m·ª•c, v·ªõi ƒë∆∞·ªùng KDE ƒë·ªÉ th·∫•y xu h∆∞·ªõng.
            - **Nh·∫≠n x√©t:**
              - C√°c danh m·ª•c nh∆∞ IT, T√†i ch√≠nh c√≥ xu h∆∞·ªõng c√≥ m·ª©c l∆∞∆°ng cao h∆°n.
              - S·ª± bi·∫øn ƒë·ªông l∆∞∆°ng (IQR) kh√°c nhau gi·ªØa c√°c danh m·ª•c, cho th·∫•y m·ª©c ƒë·ªô ƒëa d·∫°ng trong c∆° h·ªôi l∆∞∆°ng.
              - C√°c ƒëi·ªÉm ngo·∫°i lai ·ªü m·ªôt s·ªë danh m·ª•c c√≥ th·ªÉ l√† c√°c v·ªã tr√≠ c·∫•p cao ho·∫∑c ƒë·∫∑c th√π.
            """)

    with tab3:
        st.markdown('<div class="section-title">Kinh Nghi·ªám & M·ª©c L∆∞∆°ng</div>', unsafe_allow_html=True)

        y_axis_value = st.selectbox(
            "Ch·ªçn gi√° tr·ªã tr√™n tr·ª•c Y:",
            ["S·ªë l∆∞·ª£ng b√†i ƒëƒÉng", "M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu trung b√¨nh", "M·ª©c l∆∞∆°ng t·ªëi ƒëa trung b√¨nh"],
            key="y_axis_exp"
        )

        chart_type = st.radio("Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:", ["Box", "Scatter"])
        st.markdown('<div class="chart-title">Bi·ªÉu ƒê·ªì Ph√¢n T√≠ch</div>', unsafe_allow_html=True)

        fig, ax = plt.subplots(figsize=(12, 7))
        if y_axis_value == "S·ªë l∆∞·ª£ng b√†i ƒëƒÉng":
            if chart_type == "Box":
                sns.boxplot(x="min_experience_years", y="min_salary_mil_vnd", data=df, ax=ax)
                ax.set_ylabel("S·ªë l∆∞·ª£ng b√†i ƒëƒÉng", fontsize=12)
            elif chart_type == "Scatter":
                sns.scatterplot(x="min_experience_years", y="min_salary_mil_vnd", data=df, ax=ax)
                ax.set_ylabel("S·ªë l∆∞·ª£ng b√†i ƒëƒÉng", fontsize=12)
        else:
            if y_axis_value == "M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu trung b√¨nh":
                grouped = df.groupby("min_experience_years")["min_salary_mil_vnd"].mean().reset_index()
                y_col = "min_salary_mil_vnd"
                y_label = "M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu Trung B√¨nh (tri·ªáu VND)"
            else:
                grouped = df.groupby("min_experience_years")["max_salary_mil_vnd"].mean().reset_index()
                y_col = "max_salary_mil_vnd"
                y_label = "M·ª©c L∆∞∆°ng T·ªëi ƒêa Trung B√¨nh (tri·ªáu VND)"

            if chart_type == "Box":
                sns.barplot(x="min_experience_years", y=y_col, data=grouped, ax=ax)
            elif chart_type == "Scatter":
                sns.scatterplot(x="min_experience_years", y=y_col, data=grouped, ax=ax)
            ax.set_ylabel(y_label, fontsize=12)

        ax.set_title("Kinh Nghi·ªám v√† M·ª©c L∆∞∆°ng", fontsize=14, pad=15)
        ax.set_xlabel("S·ªë NƒÉm Kinh Nghi·ªám T·ªëi Thi·ªÉu", fontsize=12)
        plt.tight_layout()
        st.pyplot(fig)
        pdf_buffer = save_fig_to_pdf(fig)
        st.download_button(
            label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
            data=pdf_buffer,
            file_name=f"KinhNghiem_Luong_{chart_type}.pdf",
            mime="application/pdf"
        )

        with st.expander("üí° Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
            st.markdown("""
            - **Bi·ªÉu ƒë·ªì Boxplot/Scatter:**
              - **Boxplot:** Th·ªÉ hi·ªán ph√¢n ph·ªëi m·ª©c l∆∞∆°ng t·ªëi thi·ªÉu theo s·ªë nƒÉm kinh nghi·ªám (0-5 nƒÉm). Trung v·ªã tƒÉng theo kinh nghi·ªám, cho th·∫•y kinh nghi·ªám cao h∆°n th∆∞·ªùng c√≥ l∆∞∆°ng cao h∆°n.
              - **Scatter:** Hi·ªÉn th·ªã m·ªëi quan h·ªá gi·ªØa kinh nghi·ªám v√† l∆∞∆°ng, v·ªõi c√°c ƒëi·ªÉm ph√¢n t√°n cho th·∫•y s·ª± ƒëa d·∫°ng trong m·ª©c l∆∞∆°ng cho c√πng m·ª©c kinh nghi·ªám.
            - **Nh·∫≠n x√©t:**
              - Kinh nghi·ªám t·ª´ 0-1 nƒÉm c√≥ m·ª©c l∆∞∆°ng th·∫•p nh·∫•t, v·ªõi √≠t bi·∫øn ƒë·ªông.
              - T·ª´ 2-5 nƒÉm, m·ª©c l∆∞∆°ng tƒÉng ƒë√°ng k·ªÉ, nh∆∞ng c≈©ng c√≥ nhi·ªÅu ƒëi·ªÉm ngo·∫°i lai (c√°c v·ªã tr√≠ l∆∞∆°ng cao b·∫•t th∆∞·ªùng).
              - M·ªëi quan h·ªá gi·ªØa kinh nghi·ªám v√† l∆∞∆°ng kh√¥ng ho√†n to√†n tuy·∫øn t√≠nh, do c√°c y·∫øu t·ªë kh√°c nh∆∞ danh m·ª•c c√¥ng vi·ªác ho·∫∑c ƒë·ªãa ƒëi·ªÉm.
            """)

    with tab4:
        st.markdown('<div class="section-title">Ph√¢n B·ªë ƒê·ªãa ƒêi·ªÉm Tuy·ªÉn D·ª•ng</div>', unsafe_allow_html=True)

        st.markdown('<div class="filter-box">', unsafe_allow_html=True)
        locations = df['primary_location'].dropna().unique().tolist()
        selected_locations = st.multiselect(
            "Ch·ªçn c√°c ƒë·ªãa ƒëi·ªÉm (b·ªè tr·ªëng ƒë·ªÉ ch·ªçn t·∫•t c·∫£):",
            options=locations,
            default=locations,
            key="filter_locations"
        )
        st.markdown('</div>', unsafe_allow_html=True)

        filtered_df = df.copy()
        if selected_locations:
            filtered_df = filtered_df[filtered_df['primary_location'].isin(selected_locations)]

        if filtered_df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi l·ªçc. Vui l√≤ng ch·ªçn l·∫°i ƒë·ªãa ƒëi·ªÉm.")
        else:
            st.markdown(f"ƒêang hi·ªÉn th·ªã d·ªØ li·ªáu cho: **{', '.join(selected_locations)}**")
            st.markdown('<div class="chart-title">Bi·ªÉu ƒê·ªì Ph√¢n B·ªë</div>', unsafe_allow_html=True)

            fig, ax = plt.subplots(figsize=(20, 16))
            y_axis_value = st.selectbox(
                "Ch·ªçn gi√° tr·ªã tr√™n tr·ª•c X:",
                ["S·ªë l∆∞·ª£ng b√†i ƒëƒÉng", "M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu trung b√¨nh", "M·ª©c l∆∞∆°ng t·ªëi ƒëa trung b√¨nh"],
                key="y_axis_location"
            )

            if y_axis_value == "S·ªë l∆∞·ª£ng b√†i ƒëƒÉng":
                counts = (
                    filtered_df['primary_location']
                    .value_counts()
                    .rename_axis('primary_location')
                    .reset_index(name='count')
                )
                counts = counts[counts['primary_location'].isin(selected_locations)]
                counts['primary_location'] = pd.Categorical(counts['primary_location'], categories=selected_locations, ordered=True)
                counts = counts.sort_values('primary_location')
                sns.barplot(x='count', y='primary_location', data=counts, palette="viridis", ax=ax)
                ax.set_xlabel('S·ªë L∆∞·ª£ng B√†i ƒêƒÉng', fontsize=12)
                ax.set_ylabel('ƒê·ªãa ƒêi·ªÉm', fontsize=12)
            else:
                if y_axis_value == "M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu trung b√¨nh":
                    grouped = filtered_df.groupby("primary_location", as_index=False)["min_salary_mil_vnd"].mean()
                    x_col = "min_salary_mil_vnd"
                    x_label = "M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu Trung B√¨nh (tri·ªáu VND)"
                else:
                    grouped = filtered_df.groupby("primary_location", as_index=False)["max_salary_mil_vnd"].mean()
                    x_col = "max_salary_mil_vnd"
                    x_label = "M·ª©c L∆∞∆°ng T·ªëi ƒêa Trung B√¨nh (tri·ªáu VND)"

                grouped = grouped[grouped['primary_location'].isin(selected_locations)]
                grouped['primary_location'] = pd.Categorical(grouped['primary_location'], categories=selected_locations, ordered=True)
                grouped = grouped.sort_values('primary_location')

                sns.barplot(x=x_col, y='primary_location', data=grouped, palette="viridis", ax=ax)
                ax.set_xlabel(x_label, fontsize=12)
                ax.set_ylabel('ƒê·ªãa ƒêi·ªÉm', fontsize=12)

            ax.set_title("Ph√¢n B·ªë Theo ƒê·ªãa ƒêi·ªÉm Tuy·ªÉn D·ª•ng", fontsize=14, pad=15)
            plt.tight_layout()
            st.pyplot(fig)

            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                data=pdf_buffer,
                file_name="PhanBo_DiaDiem.pdf",
                mime="application/pdf"
            )

    with tab5:
        st.markdown('<div class="section-title">Bi·ªÉu ƒê·ªì T∆∞∆°ng Quan (Heatmap)</div>', unsafe_allow_html=True)
        
        st.markdown('<div class="filter-box">', unsafe_allow_html=True)
        categories = df['primary_category'].unique().tolist()
        selected_categories = st.multiselect(
            "Ch·ªçn c√°c danh m·ª•c c√¥ng vi·ªác (b·ªè tr·ªëng ƒë·ªÉ ch·ªçn t·∫•t c·∫£):",
            options=categories,
            default=categories,
            key="filter_categories_corr"
        )
        st.markdown('</div>', unsafe_allow_html=True)

        filtered_df = df.copy()
        if selected_categories:
            filtered_df = filtered_df[filtered_df['primary_category'].isin(selected_categories)]

        st.markdown('<div class="chart-title">Bi·ªÉu ƒê·ªì Nhi·ªát</div>', unsafe_allow_html=True)
        
        corr_cols = ['min_salary_mil_vnd', 'max_salary_mil_vnd', 'min_experience_years', 'max_experience_years']
        corr_df = filtered_df[corr_cols].dropna()
        
        if corr_df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ t√≠nh t∆∞∆°ng quan. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu sau khi l·ªçc danh m·ª•c.")
        else:
            corr_matrix = corr_df.corr()
            
            fig, ax = plt.subplots(figsize=(8, 6))
            sns.heatmap(
                corr_matrix,
                annot=True,
                cmap="coolwarm",
                fmt=".2f",
                linewidths=0.5,
                vmin=-1, vmax=1,
                ax=ax,
                square=True
            )
            ax.set_title("T∆∞∆°ng Quan Gi·ªØa C√°c Bi·∫øn S·ªë", fontsize=14, pad=15)
            plt.tight_layout()
            st.pyplot(fig)
            
            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                data=pdf_buffer,
                file_name="TuongQuan.pdf",
                mime="application/pdf"
            )

        with st.expander("üí° Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
            st.markdown("""
            - **Bi·ªÉu ƒë·ªì Nhi·ªát T∆∞∆°ng Quan:**
              - Th·ªÉ hi·ªán m·ª©c ƒë·ªô t∆∞∆°ng quan tuy·∫øn t√≠nh gi·ªØa c√°c bi·∫øn s·ªë: m·ª©c l∆∞∆°ng t·ªëi thi·ªÉu, t·ªëi ƒëa, kinh nghi·ªám t·ªëi thi·ªÉu, t·ªëi ƒëa.
              - Gi√° tr·ªã g·∫ßn 1 ho·∫∑c -1 cho th·∫•y t∆∞∆°ng quan m·∫°nh; g·∫ßn 0 cho th·∫•y √≠t ho·∫∑c kh√¥ng t∆∞∆°ng quan.
            - **Nh·∫≠n x√©t:**
              - **M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu v√† t·ªëi ƒëa:** Th∆∞·ªùng c√≥ t∆∞∆°ng quan cao, v√¨ c√°c b√†i ƒëƒÉng c√≥ xu h∆∞·ªõng x√°c ƒë·ªãnh m·ªôt kho·∫£ng l∆∞∆°ng r√µ r√†ng.
              - **Kinh nghi·ªám v√† m·ª©c l∆∞∆°ng:** C√≥ th·ªÉ c√≥ t∆∞∆°ng quan d∆∞∆°ng nh·∫π, nh∆∞ng kh√¥ng m·∫°nh, do c√°c y·∫øu t·ªë kh√°c nh∆∞ danh m·ª•c c√¥ng vi·ªác ·∫£nh h∆∞·ªüng ƒë·∫øn l∆∞∆°ng.
              - **Kinh nghi·ªám t·ªëi thi·ªÉu v√† t·ªëi ƒëa:** T∆∞∆°ng quan cao, v√¨ nhi·ªÅu b√†i ƒëƒÉng y√™u c·∫ßu m·ªôt kho·∫£ng kinh nghi·ªám c·ª• th·ªÉ.
            """)

    with tab6:
        st.markdown('<div class="section-title">Ph√¢n T√≠ch Song Bi·∫øn</div>', unsafe_allow_html=True)
        
        st.markdown('<div class="filter-box">', unsafe_allow_html=True)
        categories = df['primary_category'].unique().tolist()
        selected_categories = st.multiselect(
            "Ch·ªçn c√°c danh m·ª•c c√¥ng vi·ªác (b·ªè tr·ªëng ƒë·ªÉ ch·ªçn t·∫•t c·∫£):",
            options=categories,
            default=categories,
            key="filter_categories_bivariate"
        )
        st.markdown('</div>', unsafe_allow_html=True)

        filtered_df = df.copy()
        if selected_categories:
            filtered_df = filtered_df[filtered_df['primary_category'].isin(selected_categories)]

        if filtered_df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi l·ªçc. Vui l√≤ng ch·ªçn l·∫°i danh m·ª•c.")
        else:
            num_col = filtered_df.select_dtypes(include=['float64']).columns.tolist()
            feature_x = st.selectbox("Ch·ªçn bi·∫øn X:", num_col)
            feature_y = st.selectbox("Ch·ªçn bi·∫øn Y:", num_col)
            plot_type = st.radio("Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:", ["Scatter", "2D KDE"])

            if feature_x != feature_y:
                st.markdown('<div class="chart-title">Bi·ªÉu ƒê·ªì Ph√¢n T√≠ch</div>', unsafe_allow_html=True)
                fig, ax = plt.subplots(figsize=(12, 7))
                
                if plot_type == "Scatter":
                    sns.scatterplot(
                        x=filtered_df[feature_x], 
                        y=filtered_df[feature_y], 
                        hue=filtered_df["primary_category"], 
                        palette=PALETTE[:len(selected_categories)],
                        ax=ax
                    )
                elif plot_type == "2D KDE":
                    sns.kdeplot(
                        x=filtered_df[feature_x], 
                        y=filtered_df[feature_y], 
                        cmap="Blues", 
                        fill=True, 
                        ax=ax
                    )
                
                ax.set_title(f"{feature_x} vs {feature_y} ({plot_type})", fontsize=14, pad=15)
                ax.set_xlabel(feature_x, fontsize=12)
                ax.set_ylabel(feature_y, fontsize=12)
                plt.tight_layout()
                st.pyplot(fig)
                
                pdf_buffer = save_fig_to_pdf(fig)
                st.download_button(
                    label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                    data=pdf_buffer,
                    file_name=f"{feature_x}_vs_{feature_y}_{plot_type}.pdf",
                    mime="application/pdf"
                )

    with tab7:
        st.markdown('<div class="section-title">Bi·ªÉu ƒê·ªì Xu H∆∞·ªõng</div>', unsafe_allow_html=True)

        grouped = df.groupby("min_experience_years")[["min_salary_mil_vnd", "max_salary_mil_vnd"]].mean().reset_index()

        if grouped.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì xu h∆∞·ªõng.")
        else:
            fig, ax = plt.subplots(figsize=(12, 7))
            sns.lineplot(x="min_experience_years", y="min_salary_mil_vnd", data=grouped, label="M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu", ax=ax, color=PALETTE[0])
            sns.lineplot(x="min_experience_years", y="max_salary_mil_vnd", data=grouped, label="M·ª©c L∆∞∆°ng T·ªëi ƒêa", ax=ax, color=PALETTE[1])
            ax.set_title("M·ª©c L∆∞∆°ng Theo Kinh Nghi·ªám (Bi·ªÉu ƒê·ªì ƒê∆∞·ªùng)", fontsize=14, pad=15)
            ax.set_xlabel("S·ªë NƒÉm Kinh Nghi·ªám T·ªëi Thi·ªÉu", fontsize=12)
            ax.set_ylabel("M·ª©c L∆∞∆°ng (Tri·ªáu VND)", fontsize=12)
            ax.legend(title="Lo·∫°i L∆∞∆°ng")
            plt.grid(True, linestyle='--', alpha=0.7)
            plt.tight_layout()
            st.pyplot(fig)

            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                data=pdf_buffer,
                file_name="LineChart_MucLuong_KinhNghiem.pdf",
                mime="application/pdf"
            )

        with st.expander("üí° Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
            st.markdown("""
            - **Bi·ªÉu ƒê·ªì ƒê∆∞·ªùng:**
              - Th·ªÉ hi·ªán xu h∆∞·ªõng m·ª©c l∆∞∆°ng t·ªëi thi·ªÉu v√† t·ªëi ƒëa theo s·ªë nƒÉm kinh nghi·ªám.
              - ƒê∆∞·ªùng bi·ªÉu di·ªÖn gi√∫p d·ªÖ d√†ng nh·∫≠n th·∫•y s·ª± thay ƒë·ªïi m·ª©c l∆∞∆°ng theo kinh nghi·ªám.
            - **Nh·∫≠n x√©t:**
              - M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu v√† t·ªëi ƒëa th∆∞·ªùng tƒÉng theo s·ªë nƒÉm kinh nghi·ªám.
              - S·ª± kh√°c bi·ªát gi·ªØa m·ª©c l∆∞∆°ng t·ªëi thi·ªÉu v√† t·ªëi ƒëa c√≥ th·ªÉ ph·∫£n √°nh s·ª± ƒëa d·∫°ng trong c√°c v·ªã tr√≠ c√¥ng vi·ªác.
            """)

    with tab8:
        st.markdown('<div class="section-title">Ph√¢n T√≠ch AI</div>', unsafe_allow_html=True)
        
        st.markdown('<div class="filter-box">', unsafe_allow_html=True)
        categories = df['primary_category'].unique().tolist()
        selected_categories = st.multiselect(
            "Ch·ªçn c√°c danh m·ª•c c√¥ng vi·ªác (b·ªè tr·ªëng ƒë·ªÉ ch·ªçn t·∫•t c·∫£):",
            options=categories,
            default=categories,
            key="filter_categories_ai"
        )
        st.markdown('</div>', unsafe_allow_html=True)

        filtered_df = df.copy()
        if selected_categories:
            filtered_df = filtered_df[filtered_df['primary_category'].isin(selected_categories)]

        if filtered_df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi l·ªçc. Vui l√≤ng ch·ªçn l·∫°i danh m·ª•c.")
        else:
            # Ph√¢n t√≠ch d·ª± ƒëo√°n l∆∞∆°ng
            st.markdown('<div class="chart-title">D·ª± ƒêo√°n M·ª©c L∆∞∆°ng</div>', unsafe_allow_html=True)
            model, results, X_test = predict_salary(filtered_df)
            
            if model is None:
                st.warning("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh d·ª± ƒëo√°n l∆∞∆°ng.")
            else:
                fig, ax = plt.subplots(figsize=(10, 6))
                sns.scatterplot(x='Actual', y='Predicted', data=results, ax=ax, color=PALETTE[0], alpha=0.5)
                ax.plot([results['Actual'].min(), results['Actual'].max()], 
                        [results['Actual'].min(), results['Actual'].max()], 
                        'r--', lw=2, label='ƒê∆∞·ªùng l√Ω t∆∞·ªüng')
                ax.set_title('D·ª± ƒêo√°n M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu (H·ªìi Quy Tuy·∫øn T√≠nh)', fontsize=14, pad=15)
                ax.set_xlabel('M·ª©c L∆∞∆°ng Th·ª±c T·∫ø (Tri·ªáu VND)', fontsize=12)
                ax.set_ylabel('M·ª©c L∆∞∆°ng D·ª± ƒêo√°n (Tri·ªáu VND)', fontsize=12)
                ax.legend()
                plt.tight_layout()
                st.pyplot(fig)
                
                pdf_buffer = save_fig_to_pdf(fig)
                st.download_button(
                    label="üì• L∆∞u Bi·ªÉu ƒê·ªì D·ª± ƒêo√°n L∆∞∆°ng (PDF)",
                    data=pdf_buffer,
                    file_name="Salary_Prediction.pdf",
                    mime="application/pdf"
                )

                # T√πy ch·ªçn nh·∫≠p li·ªáu ƒë·ªÉ d·ª± ƒëo√°n l∆∞∆°ng
                st.subheader("D·ª± ƒêo√°n L∆∞∆°ng C√° Nh√¢n")
                exp_years = st.number_input("S·ªë nƒÉm kinh nghi·ªám:", min_value=0.0, max_value=10.0, value=2.0, step=0.5)
                category = st.selectbox("Danh m·ª•c c√¥ng vi·ªác:", categories)
                location = st.selectbox("ƒê·ªãa ƒëi·ªÉm:", df['primary_location'].unique().tolist())
                
                if st.button("D·ª± ƒëo√°n"):
                    input_data = pd.DataFrame({
                        'min_experience_years': [exp_years],
                        'primary_category': [category],
                        'primary_location': [location]
                    })
                    pred_salary = model.predict(input_data)[0]
                    st.success(f"M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu d·ª± ƒëo√°n: {pred_salary:.2f} tri·ªáu VND")

            # Ph√¢n t√≠ch k·ªπ nƒÉng
            st.markdown('<div class="chart-title">Top 10 K·ªπ NƒÉng Ph·ªï Bi·∫øn</div>', unsafe_allow_html=True)
            skills_df = extract_skills(filtered_df)
            
            if skills_df.empty:
                st.warning("Kh√¥ng t√¨m th·∫•y k·ªπ nƒÉng n√†o trong y√™u c·∫ßu c√¥ng vi·ªác.")
            else:
                fig, ax = plt.subplots(figsize=(12, 7))
                sns.barplot(x='Count', y='Skill', data=skills_df, palette="viridis", ax=ax)
                ax.set_title('Top 10 K·ªπ NƒÉng Ph·ªï Bi·∫øn Trong Y√™u C·∫ßu C√¥ng Vi·ªác', fontsize=14, pad=15)
                ax.set_xlabel('S·ªë L∆∞·ª£ng Xu·∫•t Hi·ªán', fontsize=12)
                ax.set_ylabel('K·ªπ NƒÉng', fontsize=12)
                plt.tight_layout()
                st.pyplot(fig)
                
                pdf_buffer = save_fig_to_pdf(fig)
                st.download_button(
                    label="üì• L∆∞u Bi·ªÉu ƒê·ªì K·ªπ NƒÉng (PDF)",
                    data=pdf_buffer,
                    file_name="Top_Skills.pdf",
                    mime="application/pdf"
                )

        with st.expander("üí° Nh·∫≠n X√©t V·ªÅ Ph√¢n T√≠ch AI"):
            st.markdown("""
            - **D·ª± ƒêo√°n M·ª©c L∆∞∆°ng:**
              - M√¥ h√¨nh h·ªìi quy tuy·∫øn t√≠nh d·ª± ƒëo√°n m·ª©c l∆∞∆°ng t·ªëi thi·ªÉu d·ª±a tr√™n kinh nghi·ªám, danh m·ª•c c√¥ng vi·ªác, v√† ƒë·ªãa ƒëi·ªÉm.
              - Bi·ªÉu ƒë·ªì ph√¢n t√°n so s√°nh gi√° tr·ªã th·ª±c t·∫ø v√† d·ª± ƒëo√°n, v·ªõi ƒë∆∞·ªùng l√Ω t∆∞·ªüng (y=x) ƒë·ªÉ ƒë√°nh gi√° ƒë·ªô ch√≠nh x√°c.
              - Nh·∫≠n x√©t: M√¥ h√¨nh c√≥ th·ªÉ d·ª± ƒëo√°n g·∫ßn ƒë√∫ng m·ª©c l∆∞∆°ng, nh∆∞ng ƒë·ªô ch√≠nh x√°c ph·ª• thu·ªôc v√†o ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu v√† c√°c y·∫øu t·ªë kh√°c (nh∆∞ m√¥ t·∫£ c√¥ng vi·ªác).
            - **Ph√¢n T√≠ch K·ªπ NƒÉng:**
              - Tr√≠ch xu·∫•t c√°c k·ªπ nƒÉng ph·ªï bi·∫øn t·ª´ y√™u c·∫ßu c√¥ng vi·ªác, hi·ªÉn th·ªã t·∫ßn su·∫•t xu·∫•t hi·ªán.
              - Nh·∫≠n x√©t: C√°c k·ªπ nƒÉng nh∆∞ Python, SQL, ho·∫∑c qu·∫£n l√Ω th∆∞·ªùng xu·∫•t hi·ªán nhi·ªÅu trong c√°c danh m·ª•c c√¥ng ngh·ªá v√† kinh doanh, ph·∫£n √°nh nhu c·∫ßu th·ªã tr∆∞·ªùng.
            """)

# --- Trang 4: Nh·∫≠n X√©t Chung ---
elif page == "4. Nh·∫≠n X√©t Chung":
    st.header("4. Nh·∫≠n X√©t Chung")
    avg_min_salary = df["min_salary_mil_vnd"].mean()
    avg_experience = df["min_experience_years"].mean()
    top_location = df["primary_location"].mode()[0]
    top_category = df["primary_category"].mode()[0]
    location_percentage = (df["primary_location"] == top_location).mean() * 100
    st.markdown(f"""
    - **T·ªïng Quan v·ªÅ D·ªØ Li·ªáu v√† K·∫øt Qu·∫£ Ph√¢n T√≠ch:**
        - **M·ª©c l∆∞∆°ng v√† Kinh nghi·ªám:** M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu trung b√¨nh l√† {avg_min_salary:.2f} tri·ªáu VND, v·ªõi kinh nghi·ªám y√™u c·∫ßu trung b√¨nh {avg_experience:.2f} nƒÉm.
        - **Ph√¢n b·ªë ƒê·ªãa ƒëi·ªÉm:** {top_location} chi·∫øm {location_percentage:.2f}% s·ªë b√†i ƒëƒÉng, cho th·∫•y s·ª± t·∫≠p trung c∆° h·ªôi vi·ªác l√†m ·ªü c√°c th√†nh ph·ªë l·ªõn.
        - **Danh m·ª•c Ph·ªï bi·∫øn:** {top_category} l√† danh m·ª•c c√¥ng vi·ªác ph·ªï bi·∫øn nh·∫•t, ph·∫£n √°nh nhu c·∫ßu cao trong lƒ©nh v·ª±c n√†y.
        - **Kinh nghi·ªám v√† L∆∞∆°ng:** C√≥ xu h∆∞·ªõng m·ª©c l∆∞∆°ng tƒÉng theo kinh nghi·ªám, nh∆∞ng s·ª± bi·∫øn ƒë·ªông l·ªõn do ·∫£nh h∆∞·ªüng c·ªßa danh m·ª•c c√¥ng vi·ªác v√† ƒë·ªãa ƒëi·ªÉm.
        - **Ph√¢n t√≠ch AI:** M√¥ h√¨nh d·ª± ƒëo√°n l∆∞∆°ng v√† ph√¢n t√≠ch k·ªπ nƒÉng gi√∫p x√°c ƒë·ªãnh c√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn l∆∞∆°ng v√† nhu c·∫ßu k·ªπ nƒÉng th·ªã tr∆∞·ªùng.
    """)