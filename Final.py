import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import sklearn.preprocessing as skp
import plotly.express as px
from matplotlib.backends.backend_pdf import PdfPages
from io import BytesIO

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(page_title="Ph√¢n T√≠ch B·ªánh Ph·ªïi", page_icon="ü´Å", layout="wide", initial_sidebar_state="expanded")

# Thi·∫øt l·∫≠p b·∫£ng m√†u
sns.set_palette("colorblind")
PALETTE = ["#88CCEE", "#44AA99", "#117733", "#999933", "#DDCC77", "#CC6677", "#882255", "#AA4499"]

# --- H√†m t·∫°o PDF t·ª´ figure ---
def save_fig_to_pdf(fig):
    buffer = BytesIO()
    with PdfPages(buffer) as pdf:
        pdf.savefig(fig, bbox_inches='tight')
    buffer.seek(0)
    return buffer

# --- H√†m t·∫£i v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ---
@st.cache_data(show_spinner=False)
def load_and_preprocess_data(file):
    try:
        df = pd.read_csv(file, na_values=["None", " ", "UNKNOWN", -1, 999, "NA", "N/A", "NULL"])
        col_mapping = {
            "Age": "Tu·ªïi", "Gender": "Gi·ªõi T√≠nh", "Smoking Status": "T√¨nh Tr·∫°ng H√∫t Thu·ªëc",
            "Lung Capacity": "Dung T√≠ch Ph·ªïi", "Disease Type": "Lo·∫°i B·ªánh", 
            "Treatment Type": "Lo·∫°i ƒêi·ªÅu Tr·ªã", "Hospital Visits": "S·ªë L∆∞·ª£t Kh√°m B·ªánh", 
            "Recovered": "H·ªìi Ph·ª•c"
        }
        df.columns = [col_mapping.get(col, col) for col in df.columns]
        numeric_cols = ["Tu·ªïi", "Dung T√≠ch Ph·ªïi", "S·ªë L∆∞·ª£t Kh√°m B·ªánh"]
        for col in numeric_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        df["H·ªìi Ph·ª•c"] = df["H·ªìi Ph·ª•c"].map({"C√≥": 1, "Yes": 1, "Kh√¥ng": 0, "No": 0})
        categorical_cols = ["Gi·ªõi T√≠nh", "T√¨nh Tr·∫°ng H√∫t Thu·ªëc", "Lo·∫°i B·ªánh", "Lo·∫°i ƒêi·ªÅu Tr·ªã"]
        for col in categorical_cols:
            df[col] = df[col].astype('category')
        return df
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")
        st.stop()

# H√†m m√£ h√≥a d·ªØ li·ªáu ph√¢n lo·∫°i
def encode_data(data):
    encoder = skp.LabelEncoder()
    encoded_data = data.copy()
    for col in data.select_dtypes(include=['object', 'category']).columns:
        encoded_data[col] = encoder.fit_transform(data[col].astype(str))
    return encoded_data

# H√†m v·∫Ω ƒë·ªì th·ªã t·ª∑ l·ªá ph·ª•c h·ªìi b·ªánh
def plot_recovery_by_disease(df, chart_type='Pie'):
    recovery_rates = df.groupby('Lo·∫°i B·ªánh')['H·ªìi Ph·ª•c'].value_counts(normalize=True).unstack() * 100
    
    if chart_type == 'Stacked':
        plt.figure(figsize=(10, 6))
        recovery_rates.plot(kind='bar', stacked=True, color=['#FF6B6B', '#4ECDC4'])
        plt.title('T·ª∑ l·ªá ph·ª•c h·ªìi theo lo·∫°i b·ªánh', fontsize=14, pad=15)
        plt.xlabel('Lo·∫°i b·ªánh', fontsize=12)
        plt.ylabel('T·ª∑ l·ªá (%)', fontsize=12)
        plt.legend(title='H·ªìi ph·ª•c', loc='center left', bbox_to_anchor=(1.0, 0.5))
        plt.xticks(rotation=45, ha='right')
        plt.yticks(ticks=range(0, 101, 10), labels=[f"{i}%" for i in range(0, 101, 10)])
        plt.tight_layout()
    else:
        fig, axes = plt.subplots(2, 3, figsize=(15, 10))
        axes = axes.flatten()
        diseases = recovery_rates.index
        for idx, disease in enumerate(diseases):
            if idx < len(axes):
                axes[idx].pie(recovery_rates.loc[disease], labels=recovery_rates.columns,
                             autopct='%1.1f%%', colors=['#FF6B6B', '#4ECDC4'], startangle=90)
                axes[idx].set_title(f'{disease}', fontsize=10)
        for idx in range(len(diseases), len(axes)):
            axes[idx].axis('off')
        plt.suptitle('T·ª∑ l·ªá ph·ª•c h·ªìi theo lo·∫°i b·ªánh', fontsize=14, y=1.05)
        plt.tight_layout()
    
    return plt

# H√†m t·∫°o bi·ªÉu ƒë·ªì ·∫£nh h∆∞·ªüng c·ªßa h√∫t thu·ªëc
def plot_smoking_impact(df, chart_type='Stacked'):
    smoking_impact = df.groupby('T√¨nh Tr·∫°ng H√∫t Thu·ªëc')['H·ªìi Ph·ª•c'].value_counts(normalize=True).unstack() * 100
    
    if chart_type == 'Stacked':
        plt.figure(figsize=(8, 6))
        smoking_impact.plot(kind='bar', stacked=True, color=['#FF6B6B', '#4ECDC4'])
        plt.title('·∫¢nh h∆∞·ªüng c·ªßa h√∫t thu·ªëc ƒë·∫øn kh·∫£ nƒÉng ph·ª•c h·ªìi', fontsize=14, pad=15)
        plt.xlabel('T√¨nh tr·∫°ng h√∫t thu·ªëc', fontsize=12)
        plt.ylabel('T·ª∑ l·ªá (%)', fontsize=12)
        plt.legend(title='Ph·ª•c H·ªìi', loc='center left', bbox_to_anchor=(1.0, 0.5))
        plt.xticks(rotation=0)
        plt.yticks(ticks=range(0, 101, 10), labels=[f"{i}%" for i in range(0, 101, 10)])
        plt.tight_layout()
    else:
        fig, axes = plt.subplots(1, 2, figsize=(12, 6))
        for idx, smoking_status in enumerate(smoking_impact.index):
            axes[idx].pie(smoking_impact.loc[smoking_status], labels=smoking_impact.columns,
                          autopct='%1.1f%%', colors=['#FF6B6B', '#4ECDC4'], startangle=90)
            axes[idx].set_title(f'T√¨nh tr·∫°ng: {smoking_status}', fontsize=12)
        plt.suptitle('·∫¢nh h∆∞·ªüng c·ªßa h√∫t thu·ªëc ƒë·∫øn kh·∫£ nƒÉng ph·ª•c h·ªìi', fontsize=14, y=1.05)
        plt.tight_layout()
    return plt

# --- T·∫£i d·ªØ li·ªáu t·ª´ ng∆∞·ªùi d√πng ---
st.sidebar.header("T·∫£i D·ªØ Li·ªáu")
uploaded_file = st.sidebar.file_uploader("T·∫£i l√™n t·ªáp CSV", type=["csv"])
if uploaded_file is not None:
    df = load_and_preprocess_data(uploaded_file)
else:
    st.warning("Vui l√≤ng t·∫£i l√™n t·ªáp CSV ƒë·ªÉ ti·∫øp t·ª•c.")
    st.stop()

# --- CSS t√πy ch·ªânh ---
st.markdown("""
    <style>
    div[role="radiogroup"] label {
        display: flex;
        align-items: center;
        font-size: 18px;
        font-weight: bold;
        color: #333;
        padding: 10px 15px;
        border-radius: 8px;
        transition: background-color 0.3s ease, transform 0.2s ease;
        cursor: pointer;
    }
    div[role="radiogroup"] label span {
        visibility: hidden;
        width: 0;
        margin: 0;
        padding: 0;
    }
    div[role="radiogroup"] label:hover {
        background-color: #FF851B;
        color: white !important;
        transform: scale(1.02);
    }
    div[role="radiogroup"] label[data-selected="true"] {
        background-color: #FF851B !important;
        color: white !important;
        font-weight: bold;
    }
    </style>
""", unsafe_allow_html=True)

# --- Ti√™u ƒë·ªÅ v√† ƒëi·ªÅu h∆∞·ªõng sidebar ---
st.title("ü´Å B·∫£ng ƒêi·ªÅu Khi·ªÉn Ph√¢n T√≠ch B·ªánh Ph·ªïi")
page = st.sidebar.radio("Ch·ªçn Trang", [
    "1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu", 
    "2. Th·ªëng K√™ M√¥ T·∫£", 
    "3. Ph√¢n T√≠ch Chuy√™n S√¢u", 
    "4. Nh·∫≠n X√©t Chung", 
], index=0)

# --- Trang 1: Gi·ªõi Thi·ªáu D·ªØ Li·ªáu ---
if page == "1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu":
    st.header("1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu")
    st.subheader("Ngu·ªìn G·ªëc D·ªØ Li·ªáu")
    st.markdown("""
    - D·ªØ li·ªáu ƒë∆∞·ª£c l·∫•y t·ª´ n·ªÅn t·∫£ng Kaggle: [Lung Disease Prediction](https://www.kaggle.com/datasets/samikshadalvi/lungs-diseases-dataset).
    - T·∫≠p d·ªØ li·ªáu bao g·ªìm th√¥ng tin v·ªÅ b·ªánh nh√¢n m·∫Øc c√°c b·ªánh ph·ªïi nh∆∞ hen suy·ªÖn, vi√™m ph·∫ø qu·∫£n, COPD, ung th∆∞ ph·ªïi, v√† vi√™m ph·ªïi.
    - D·ªØ li·ªáu bao g·ªìm c√°c th√¥ng tin nh√¢n kh·∫©u h·ªçc, t√¨nh tr·∫°ng h√∫t thu·ªëc, dung t√≠ch ph·ªïi, s·ªë l∆∞·ª£t kh√°m b·ªánh, v√† k·∫øt qu·∫£ h·ªìi ph·ª•c.
    """)

    st.subheader("M√¥ T·∫£ D·ªØ Li·ªáu")
    st.markdown("""
    - **üßë‚Äçü§ù‚ÄçüßëAge:** Tu·ªïi c·ªßa b·ªánh nh√¢n (s·ªë nguy√™n).
    - **‚ôÄÔ∏èGender:** Gi·ªõi t√≠nh (Male/Female).
    - **üö¨Smoking Status:** T√¨nh tr·∫°ng h√∫t thu·ªëc (Yes/No).
    - **üå°Ô∏èLung Capacity:** Dung t√≠ch ph·ªïi c·ªßa b·ªánh nh√¢n (s·ªë th·ª±c, ƒë∆°n v·ªã l√≠t).
    - **ü´ÅDisease Type:** Lo·∫°i b·ªánh ph·ªïi (Asthma, Bronchitis, COPD, Lung Cancer, Pneumonia).
    - **üíäTreatment Type:** Lo·∫°i ƒëi·ªÅu tr·ªã (Medication, Surgery, Therapy).
    - **üè•Hospital Visits:** S·ªë l∆∞·ª£t kh√°m b·ªánh (s·ªë nguy√™n).
    - **‚úÖRecovered:** B·ªánh nh√¢n ƒë√£ h·ªìi ph·ª•c ch∆∞a? (0: No, 1: Yes).
    """)

    with st.expander("Xem To√†n B·ªô D·ªØ Li·ªáu Th√¥ (ƒë√£ d·ªãch sang ti·∫øng Vi·ªát)"):
        st.dataframe(df)

# --- Trang 2: Th·ªëng K√™ M√¥ T·∫£ ---
elif page == "2. Th·ªëng K√™ M√¥ T·∫£":
    st.header("2. Th·ªëng K√™ M√¥ T·∫£")
    st.subheader("Th√¥ng Tin D·ªØ Li·ªáu")
    st.dataframe(df.describe())

    st.subheader("Ph√¢n Ph·ªëi D·ªØ Li·ªáu")
    numeric_cols = df.select_dtypes(include=np.number).columns
    cat_cols = df.select_dtypes(include=['category']).columns.tolist()

    # Ph√¢n ph·ªëi bi·∫øn s·ªë
    num_select = st.selectbox("Ch·ªçn m·ªôt bi·∫øn s·ªë ƒë·ªÉ xem ph√¢n ph·ªëi bi·∫øn c·ªßa bi·∫øn numerical:", numeric_cols)
    if num_select:
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.histplot(df[num_select].dropna(), kde=True, color=PALETTE[0], ax=ax)
        ax.set_title(f"Ph√¢n b·ªë c·ªßa {num_select}")
        st.pyplot(fig)
        pdf_buffer = save_fig_to_pdf(fig)
        st.download_button(
            label="L∆∞u bi·ªÉu ƒë·ªì d∆∞·ªõi d·∫°ng PDF",
            data=pdf_buffer,
            file_name=f"PhanBo_{num_select}.pdf",
            mime="application/pdf"
        )

    with st.expander("Nh·∫≠n x√©t v·ªÅ Th·ªëng K√™ M√¥ T·∫£"):
        st.markdown("""
        - **Tu·ªïi:** Tu·ªïi trung b√¨nh, ƒë·ªô l·ªách chu·∫©n, v√† ph·∫°m vi tu·ªïi c·ªßa b·ªánh nh√¢n.
        - **Dung T√≠ch Ph·ªïi:** Dung t√≠ch ph·ªïi trung b√¨nh v√† ph√¢n ph·ªëi (ƒë∆°n v·ªã l√≠t).
        - **S·ªë L∆∞·ª£t Kh√°m B·ªánh:** S·ªë l∆∞·ª£t kh√°m trung b√¨nh.
        - **H·ªìi Ph·ª•c:** T·ª∑ l·ªá h·ªìi ph·ª•c (0: Kh√¥ng, 1: C√≥).
        """)

    # Ph√¢n ph·ªëi bi·∫øn ph√¢n lo·∫°i
    cat_select = st.selectbox("Ch·ªçn m·ªôt bi·∫øn ph√¢n lo·∫°i ƒë·ªÉ xem ph√¢n ph·ªëi c·ªßa bi·∫øn categorical:", cat_cols)
    if cat_select:
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.countplot(x=df[cat_select], palette=PALETTE, ax=ax)
        ax.set_title(f"Ph√¢n b·ªë c·ªßa {cat_select}")
        plt.xticks(rotation=45, ha="right")
        st.pyplot(fig)
        pdf_buffer = save_fig_to_pdf(fig)
        st.download_button(
            label="L∆∞u bi·ªÉu ƒë·ªì d∆∞·ªõi d·∫°ng PDF",
            data=pdf_buffer,
            file_name=f"PhanBo_{cat_select}.pdf",
            mime="application/pdf"
        )
        
        pie_fig = px.pie(df, names=cat_select, title=f"Ph√¢n B·ªë {cat_select}", hole=0.5, color_discrete_sequence=px.colors.qualitative.Set3)
        st.plotly_chart(pie_fig)

# --- Trang 3: Ph√¢n T√≠ch Chuy√™n S√¢u ---
elif page == "3. Ph√¢n T√≠ch Chuy√™n S√¢u":
    st.header("3. Ph√¢n T√≠ch Chuy√™n S√¢u")
    analysis_page = st.selectbox("Ch·ªçn Ph√¢n T√≠ch", [
        "Th·ªëng k√™ chung", 
        "Tu·ªïi & Dung T√≠ch Ph·ªïi", 
        "Dung L∆∞·ª£ng Ph·ªïi Trung B√¨nh Theo Nh√≥m Tu·ªïi v√† Lo·∫°i B·ªánh",
        "Lo·∫°i B·ªánh", 
        "H√∫t Thu·ªëc & Dung T√≠ch Ph·ªïi", 
        "L∆∞·ª£t Kh√°m B·ªánh", 
        "T∆∞∆°ng Quan",
        "Ph√¢n T√≠ch Song Bi·∫øn (Bivariate Analysis)",
        "T·ª∑ l·ªá h·ªìi ph·ª•c"
    ])
    
    if analysis_page == "Th·ªëng k√™ chung":
        st.subheader("Th·ªëng K√™ Chung")
        total_patients = len(df)
        avg_age = df["Tu·ªïi"].mean()
        avg_lung_capacity = df["Dung T√≠ch Ph·ªïi"].mean()
        smoking_rate = (df["T√¨nh Tr·∫°ng H√∫t Thu·ªëc"] == "C√≥").mean() * 100
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("T·ªïng S·ªë B·ªánh Nh√¢n", total_patients)
        with col2:
            st.metric("Tu·ªïi Trung B√¨nh", f"{avg_age:.2f}" if not pd.isna(avg_age) else "N/A")
        with col3:
            st.metric("Dung T√≠ch Ph·ªïi Trung B√¨nh", f"{avg_lung_capacity:.2f}" if not pd.isna(avg_lung_capacity) else "N/A")
        with col4:
            st.metric("T·ª∑ L·ªá H√∫t Thu·ªëc (%)", f"{smoking_rate:.2f}" if not pd.isna(smoking_rate) else "N/A")

    elif analysis_page == "Tu·ªïi & Dung T√≠ch Ph·ªïi":
        st.subheader("Ph√¢n B·ªë Tu·ªïi & Dung T√≠ch Ph·ªïi")
        filtered_df = df.dropna(subset=["Tu·ªïi", "Dung T√≠ch Ph·ªïi"])
        if not filtered_df["Tu·ªïi"].isnull().all():
            age_range = st.slider("Ch·ªçn Kho·∫£ng Tu·ªïi", int(filtered_df["Tu·ªïi"].min()), int(filtered_df["Tu·ªïi"].max()), 
                                  (int(filtered_df["Tu·ªïi"].min()), int(filtered_df["Tu·ªïi"].max())))
            filtered_df = filtered_df[(filtered_df["Tu·ªïi"] >= age_range[0]) & (filtered_df["Tu·ªïi"] <= age_range[1])]
            fig, ax = plt.subplots(1, 2, figsize=(12, 5))
            sns.histplot(filtered_df["Tu·ªïi"], bins=20, kde=True, ax=ax[0], color=PALETTE[0])
            ax[0].set_title("Ph√¢n B·ªë Tu·ªïi")
            ax[0].set_xlabel("Tu·ªïi")
            ax[0].set_ylabel("S·ªë L∆∞·ª£ng")
            sns.histplot(filtered_df["Dung T√≠ch Ph·ªïi"], bins=20, kde=True, ax=ax[1], color=PALETTE[1])
            ax[1].set_title("Ph√¢n B·ªë Dung T√≠ch Ph·ªïi")
            ax[1].set_xlabel("Dung T√≠ch Ph·ªïi (l√≠t)")
            ax[1].set_ylabel("S·ªë L∆∞·ª£ng")
            st.pyplot(fig)
            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="L∆∞u bi·ªÉu ƒë·ªì d∆∞·ªõi d·∫°ng PDF",
                data=pdf_buffer,
                file_name="PhanBo_Tuoi_DungTichPhoi.pdf",
                mime="application/pdf"
            )
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu tu·ªïi h·ª£p l·ªá ƒë·ªÉ hi·ªÉn th·ªã.")

    elif analysis_page == "Lo·∫°i B·ªánh":
        st.subheader("Ph√¢n B·ªë Lo·∫°i B·ªánh")
        disease_counts = df["Lo·∫°i B·ªánh"].value_counts()
        fig = plt.figure(figsize=(10, 6))
        disease_counts.plot(kind='bar')
        plt.title("Ph√¢n B·ªë Lo·∫°i B·ªánh")
        plt.xlabel("Lo·∫°i B·ªánh")
        plt.ylabel("S·ªë L∆∞·ª£ng")
        st.pyplot(fig)
        pdf_buffer = save_fig_to_pdf(fig)
        st.download_button(
            label="L∆∞u bi·ªÉu ƒë·ªì d∆∞·ªõi d·∫°ng PDF",
            data=pdf_buffer,
            file_name="PhanBo_LoaiBenh.pdf",
            mime="application/pdf"
        )

        with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
            st.markdown("""
            **Bi·ªÉu ƒë·ªì C·ªôt Ph√¢n B·ªë Lo·∫°i B·ªánh:**
            - Th·ªÉ hi·ªán s·ªë l∆∞·ª£ng b·ªánh nh√¢n m·∫Øc m·ªói lo·∫°i b·ªánh ph·ªïi trong d·ªØ li·ªáu.
            - **So s√°nh t·∫ßn su·∫•t:** Lo·∫°i b·ªánh n√†o ph·ªï bi·∫øn nh·∫•t (c·ªôt cao nh·∫•t) v√† √≠t g·∫∑p nh·∫•t (c·ªôt th·∫•p nh·∫•t)?
            - **Ch√™nh l·ªách:** ƒê√°nh gi√° m·ª©c ƒë·ªô ch√™nh l·ªách gi·ªØa c√°c lo·∫°i b·ªánh, c√≥ th·ªÉ li√™n quan ƒë·∫øn y·∫øu t·ªë nguy c∆° ho·∫∑c d·ªãch t·ªÖ.
            - **L∆∞u √Ω:** M·ªói b·ªánh nh√¢n ch·ªâ ƒë∆∞·ª£c ghi nh·∫≠n m·ªôt lo·∫°i b·ªánh ch√≠nh trong c·ªôt n√†y.
            
             **Ph√¢n T√≠ch Chi Ti·∫øt Bi·ªÉu ƒê·ªì "Ph√¢n B·ªë Lo·∫°i B·ªánh"**

            **1. Vi√™m Ph·∫ø Qu·∫£n Chi·∫øm ∆Øu Th·∫ø:**

            *   **Vi√™m Ph·∫ø Qu·∫£n** c√≥ s·ªë l∆∞·ª£ng ca b·ªánh cao nh·∫•t, v∆∞·ª£t tr·ªôi ƒë√°ng k·ªÉ so v·ªõi c√°c lo·∫°i b·ªánh ph·ªïi kh√°c ƒë∆∞·ª£c li·ªát k√™. ƒêi·ªÅu n√†y cho th·∫•y Vi√™m Ph·∫ø Qu·∫£n l√† lo·∫°i b·ªánh ph·ªïi ph·ªï bi·∫øn nh·∫•t trong nh√≥m b·ªánh ƒë∆∞·ª£c kh·∫£o s√°t.

            **2. B·ªánh Ph·ªïi T·∫Øc Ngh·∫Ωn M√£n T√≠nh v√† Hen Suy·ªÖn l√† c√°c b·ªánh m·∫°n t√≠nh ph·ªï bi·∫øn:**

            *   **B·ªánh Ph·ªïi T·∫Øc Ngh·∫Ωn M√£n T√≠nh (COPD)** v√† **Hen Suy·ªÖn** c√≥ s·ªë l∆∞·ª£ng ca b·ªánh g·∫ßn t∆∞∆°ng ƒë∆∞∆°ng v√† ƒë·ªÅu ·ªü m·ª©c cao, ch·ªâ ƒë·ª©ng sau Vi√™m Ph·∫ø Qu·∫£n. ƒêi·ªÅu n√†y nh·∫•n m·∫°nh r·∫±ng ƒë√¢y l√† hai b·ªánh ph·ªïi m·∫°n t√≠nh c√≥ ·∫£nh h∆∞·ªüng l·ªõn ƒë·∫øn s·ª©c kh·ªèe c·ªông ƒë·ªìng, ƒë√≤i h·ªèi s·ª± quan t√¢m li√™n t·ª•c v√† c√°c bi·ªán ph√°p qu·∫£n l√Ω l√¢u d√†i.

            **3. Ung Th∆∞ Ph·ªïi v√† Vi√™m Ph·ªïi c√≥ t·ª∑ l·ªá m·∫Øc th·∫•p h∆°n nh∆∞ng v·∫´n ƒë√°ng quan ng·∫°i:**

            *   **Ung Th∆∞ Ph·ªïi** v√† **Vi√™m Ph·ªïi** c√≥ s·ªë l∆∞·ª£ng ca b·ªánh th·∫•p h∆°n so v·ªõi ba b·ªánh tr√™n. Tuy nhi√™n, c·∫ßn l∆∞u √Ω r·∫±ng ƒë√¢y v·∫´n l√† nh·ªØng b·ªánh l√Ω nghi√™m tr·ªçng. Ung th∆∞ ph·ªïi l√† m·ªôt b·ªánh ƒëe d·ªça t√≠nh m·∫°ng, c√≤n vi√™m ph·ªïi c√≥ th·ªÉ g√¢y ra c√°c bi·∫øn ch·ª©ng n·∫∑ng, ƒë·∫∑c bi·ªát ·ªü nh·ªØng ƒë·ªëi t∆∞·ª£ng d·ªÖ b·ªã t·ªïn th∆∞∆°ng. D√π s·ªë l∆∞·ª£ng ca m·∫Øc th·∫•p h∆°n, s·ª± hi·ªán di·ªán c·ªßa ch√∫ng v·∫´n l√† m·ªôt v·∫•n ƒë·ªÅ y t·∫ø ƒë√°ng k·ªÉ.

            **4. S·ª± ph√¢n b·ªë kh√¥ng ƒë·ªìng ƒë·ªÅu gi·ªØa c√°c lo·∫°i b·ªánh:**

            *   Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán r√µ s·ª± kh√°c bi·ªát l·ªõn v·ªÅ s·ªë l∆∞·ª£ng ca b·ªánh gi·ªØa c√°c lo·∫°i b·ªánh ph·ªïi. S·ª± ch√™nh l·ªách n√†y cho th·∫•y s·ª± ph√¢n b·ªë kh√¥ng ƒë·ªìng ƒë·ªÅu c·ªßa c√°c b·ªánh ph·ªïi trong c·ªông ƒë·ªìng, c√≥ th·ªÉ do nhi·ªÅu y·∫øu t·ªë nh∆∞ l·ªëi s·ªëng, m√¥i tr∆∞·ªùng, c∆° ƒë·ªãa v√† kh·∫£ nƒÉng ti·∫øp c·∫≠n d·ªãch v·ª• y t·∫ø.

            **T√≥m l·∫°i:** Bi·ªÉu ƒë·ªì "Ph√¢n B·ªë Lo·∫°i B·ªánh" cho th·∫•y Vi√™m Ph·∫ø Qu·∫£n l√† b·ªánh ph·ªïi ph·ªï bi·∫øn nh·∫•t, ti·∫øp theo l√† COPD v√† Hen Suy·ªÖn, trong khi Ung Th∆∞ Ph·ªïi v√† Vi√™m Ph·ªïi c√≥ s·ªë l∆∞·ª£ng ca b·ªánh th·∫•p h∆°n nh∆∞ng v·∫´n l√† nh·ªØng v·∫•n ƒë·ªÅ s·ª©c kh·ªèe ƒë√°ng l∆∞u √Ω. S·ª± ph√¢n b·ªë n√†y c√≥ th·ªÉ gi√∫p c√°c c∆° quan y t·∫ø t·∫≠p trung ngu·ªìn l·ª±c v√† x√¢y d·ª±ng c√°c ch∆∞∆°ng tr√¨nh ph√≤ng ng·ª´a v√† ƒëi·ªÅu tr·ªã ph√π h·ª£p cho t·ª´ng lo·∫°i b·ªánh ph·ªïi.
                    **Ph√¢n T√≠ch Chi Ti·∫øt Bi·ªÉu ƒê·ªì "·∫¢nh H∆∞·ªüng c·ªßa H√∫t Thu·ªëc l√™n Dung T√≠ch Ph·ªïi" (Bi·ªÉu ƒë·ªì H·ªôp)**
            """)

    # H√∫t Thu·ªëc & Dung T√≠ch Ph·ªïi
    elif analysis_page == "H√∫t Thu·ªëc & Dung T√≠ch Ph·ªïi":
        st.subheader("·∫¢nh H∆∞·ªüng c·ªßa H√∫t Thu·ªëc l√™n Dung T√≠ch Ph·ªïi")
        plot_df = df.dropna(subset=["T√¨nh Tr·∫°ng H√∫t Thu·ªëc", "Dung T√≠ch Ph·ªïi"])
        
        # Boxplot
        fig1, ax1 = plt.subplots(figsize=(6, 4))
        sns.boxplot(x=plot_df["T√¨nh Tr·∫°ng H√∫t Thu·ªëc"], y=plot_df["Dung T√≠ch Ph·ªïi"], ax=ax1, palette=PALETTE[:2])
        ax1.set_xticklabels(["Kh√¥ng H√∫t Thu·ªëc", "H√∫t Thu·ªëc"])
        ax1.set_xlabel("T√¨nh Tr·∫°ng H√∫t Thu·ªëc")
        ax1.set_ylabel("Dung T√≠ch Ph·ªïi (l√≠t)")
        ax1.set_title("Dung T√≠ch Ph·ªïi theo T√¨nh Tr·∫°ng H√∫t Thu·ªëc")
        st.pyplot(fig1)
        pdf_buffer1 = save_fig_to_pdf(fig1)
        st.download_button(
            label="L∆∞u bi·ªÉu ƒë·ªì d∆∞·ªõi d·∫°ng PDF",
            data=pdf_buffer1,
            file_name="DungTichPhoi_Theo_HutThuoc_Boxplot.pdf",
            mime="application/pdf"
        )
        
        with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt (Bi·ªÉu ƒë·ªì H·ªôp)"):
            st.markdown("""
            **Bi·ªÉu ƒë·ªì H·ªôp (Boxplot):**
            - So s√°nh ph√¢n b·ªë dung t√≠ch ph·ªïi gi·ªØa ng∆∞·ªùi kh√¥ng h√∫t thu·ªëc v√† ng∆∞·ªùi h√∫t thu·ªëc (sau khi lo·∫°i b·ªè gi√° tr·ªã thi·∫øu).
            - **Trung v·ªã:** ƒê∆∞·ªùng k·∫ª gi·ªØa h·ªôp cho th·∫•y dung t√≠ch ph·ªïi trung b√¨nh. Trung v·ªã th·∫•p h∆°n ·ªü nh√≥m h√∫t thu·ªëc g·ª£i √Ω ·∫£nh h∆∞·ªüng ti√™u c·ª±c.
            - **IQR:** ƒê·ªô cao c·ªßa h·ªôp th·ªÉ hi·ªán s·ª± ph√¢n t√°n. IQR l·ªõn h∆°n cho th·∫•y dung t√≠ch ph·ªïi bi·∫øn ƒë·ªông nhi·ªÅu h∆°n.
            - **R√¢u:** ƒê·ªô d√†i r√¢u cho th·∫•y ph·∫°m vi dung t√≠ch ph·ªïi (kh√¥ng t√≠nh ngo·∫°i lai).
            - **ƒêi·ªÉm ngo·∫°i lai:** C√°c ƒëi·ªÉm ngo√†i r√¢u l√† gi√° tr·ªã b·∫•t th∆∞·ªùng, c√≥ th·ªÉ ƒë√°ng ch√∫ √Ω n·∫øu t·∫≠p trung ·ªü m·ªôt nh√≥m.
            - **K·∫øt lu·∫≠n s∆° b·ªô:** H√∫t thu·ªëc c√≥ th·ªÉ l√†m gi·∫£m dung t√≠ch ph·ªïi n·∫øu trung v·ªã c·ªßa nh√≥m h√∫t thu·ªëc th·∫•p h∆°n.

            **Bi·ªÉu ƒë·ªì H·ªôp (Boxplot):**
            - So s√°nh ph√¢n b·ªë dung t√≠ch ph·ªïi gi·ªØa ng∆∞·ªùi kh√¥ng h√∫t thu·ªëc v√† ng∆∞·ªùi h√∫t thu·ªëc (sau khi lo·∫°i b·ªè gi√° tr·ªã thi·∫øu).

            **1. Trung V·ªã (Median):**
            - ƒê∆∞·ªùng k·∫ª gi·ªØa h·ªôp cho th·∫•y dung t√≠ch ph·ªïi trung b√¨nh c·ªßa m·ªói nh√≥m.
            - **Nh·∫≠n x√©t:** Trung v·ªã c·ªßa nh√≥m "H√∫t Thu·ªëc" th·∫•p h∆°n r√µ r·ªát so v·ªõi nh√≥m "Kh√¥ng H√∫t Thu·ªëc". ƒêi·ªÅu n√†y g·ª£i √Ω r·∫±ng, trung b√¨nh, ng∆∞·ªùi h√∫t thu·ªëc c√≥ dung t√≠ch ph·ªïi th·∫•p h∆°n ng∆∞·ªùi kh√¥ng h√∫t thu·ªëc.  S·ª± kh√°c bi·ªát n√†y cho th·∫•y h√∫t thu·ªëc c√≥ th·ªÉ c√≥ ·∫£nh h∆∞·ªüng ti√™u c·ª±c ƒë·∫øn dung t√≠ch ph·ªïi trung b√¨nh.

            **2. Kho·∫£ng T·ª© Ph√¢n V·ªã (IQR):**
            - ƒê·ªô cao c·ªßa h·ªôp (IQR) th·ªÉ hi·ªán s·ª± ph√¢n t√°n c·ªßa d·ªØ li·ªáu, t·ª©c l√† m·ª©c ƒë·ªô bi·∫øn ƒë·ªông c·ªßa dung t√≠ch ph·ªïi trong m·ªói nh√≥m.
            - **Nh·∫≠n x√©t:**  IQR c·ªßa nh√≥m "H√∫t Thu·ªëc" c√≥ v·∫ª h∆°i l·ªõn h∆°n ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng so v·ªõi nh√≥m "Kh√¥ng H√∫t Thu·ªëc".  ƒêi·ªÅu n√†y c√≥ th·ªÉ cho th·∫•y dung t√≠ch ph·ªïi ·ªü ng∆∞·ªùi h√∫t thu·ªëc c√≥ s·ª± bi·∫øn ƒë·ªông l·ªõn h∆°n, ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng v·ªõi ng∆∞·ªùi kh√¥ng h√∫t thu·ªëc.

            **3. R√¢u Bi·ªÉu ƒê·ªì (Whiskers):**
            - ƒê·ªô d√†i c·ªßa r√¢u bi·ªÉu ƒë·ªì cho th·∫•y ph·∫°m vi dung t√≠ch ph·ªïi trong m·ªói nh√≥m, kh√¥ng t√≠nh c√°c gi√° tr·ªã ngo·∫°i lai.
            - **Nh·∫≠n x√©t:** R√¢u c·ªßa c·∫£ hai nh√≥m c√≥ ƒë·ªô d√†i t∆∞∆°ng ƒë∆∞∆°ng v√† tr·∫£i d√†i t·ª´ kho·∫£ng 1 l√≠t ƒë·∫øn g·∫ßn 6 l√≠t. ƒêi·ªÅu n√†y cho th·∫•y ph·∫°m vi dung t√≠ch ph·ªïi c√≥ th·ªÉ kh√° r·ªông ·ªü c·∫£ ng∆∞·ªùi h√∫t thu·ªëc v√† kh√¥ng h√∫t thu·ªëc, nh∆∞ng ƒëi·ªÉm quan tr·ªçng l√† s·ª± t·∫≠p trung d·ªØ li·ªáu (th·ªÉ hi·ªán qua h·ªôp) kh√°c nhau.

            **4. ƒêi·ªÉm Ngo·∫°i Lai (Outliers):**
            - C√°c ƒëi·ªÉm n·∫±m ngo√†i r√¢u bi·ªÉu ƒë·ªì l√† gi√° tr·ªã ngo·∫°i lai, t·ª©c l√† nh·ªØng gi√° tr·ªã b·∫•t th∆∞·ªùng, c√≥ th·ªÉ ƒë√°ng ch√∫ √Ω n·∫øu ch√∫ng t·∫≠p trung ·ªü m·ªôt nh√≥m c·ª• th·ªÉ.
            - **Nh·∫≠n x√©t:** Bi·ªÉu ƒë·ªì n√†y kh√¥ng hi·ªÉn th·ªã r√µ c√°c ƒëi·ªÉm ngo·∫°i lai. Tuy nhi√™n, c·∫ßn l∆∞u √Ω r·∫±ng n·∫øu c√≥ c√°c ƒëi·ªÉm ngo·∫°i lai, ƒë·∫∑c bi·ªát l√† ·ªü nh√≥m "H√∫t Thu·ªëc" v·ªõi dung t√≠ch ph·ªïi r·∫•t th·∫•p, ch√∫ng c√≥ th·ªÉ l√† d·∫•u hi·ªáu c·ªßa c√°c tr∆∞·ªùng h·ª£p b·ªánh l√Ω nghi√™m tr·ªçng li√™n quan ƒë·∫øn h√∫t thu·ªëc.

            **5. K·∫øt Lu·∫≠n S∆° B·ªô:**
            - D·ª±a tr√™n trung v·ªã th·∫•p h∆°n ·ªü nh√≥m "H√∫t Thu·ªëc", bi·ªÉu ƒë·ªì n√†y cung c·∫•p b·∫±ng ch·ª©ng s∆° b·ªô cho th·∫•y **h√∫t thu·ªëc c√≥ th·ªÉ l√†m gi·∫£m dung t√≠ch ph·ªïi**.  M·∫∑c d√π IQR v√† r√¢u cho th·∫•y s·ª± ph√¢n t√°n v√† ph·∫°m vi t∆∞∆°ng ƒë∆∞∆°ng, s·ª± kh√°c bi·ªát v·ªÅ trung v·ªã l√† d·∫•u hi·ªáu quan tr·ªçng nh·∫•t cho th·∫•y ·∫£nh h∆∞·ªüng ti√™u c·ª±c c·ªßa h√∫t thu·ªëc l√™n dung t√≠ch ph·ªïi.

            **L∆∞u √Ω:** ƒê·ªÉ c√≥ k·∫øt lu·∫≠n ch·∫Øc ch·∫Øn h∆°n, c·∫ßn xem x√©t th√™m c√°c y·∫øu t·ªë kh√°c nh∆∞ k√≠ch th∆∞·ªõc m·∫´u, ƒë·ªô tu·ªïi, gi·ªõi t√≠nh v√† c√°c y·∫øu t·ªë s·ª©c kh·ªèe kh√°c c·ªßa ng∆∞·ªùi tham gia nghi√™n c·ª©u. Tuy nhi√™n, bi·ªÉu ƒë·ªì n√†y cung c·∫•p m·ªôt c√°i nh√¨n tr·ª±c quan v√† h·ªØu √≠ch v·ªÅ m·ªëi li√™n h·ªá ti·ªÅm ·∫©n gi·ªØa h√∫t thu·ªëc v√† dung t√≠ch ph·ªïi.
                """)

        # Scatter Plot
        fig2, ax2 = plt.subplots(figsize=(8, 6))
        sns.scatterplot(x=plot_df["T√¨nh Tr·∫°ng H√∫t Thu·ªëc"].map({"Kh√¥ng": 0, "C√≥": 1}), y=plot_df["Dung T√≠ch Ph·ªïi"], 
                        data=plot_df, ax=ax2, alpha=0.3, color=PALETTE[0])
        ax2.set_xlabel("T√¨nh Tr·∫°ng H√∫t Thu·ªëc (0: Kh√¥ng H√∫t, 1: C√≥ H√∫t)")
        ax2.set_ylabel("Dung T√≠ch Ph·ªïi (l√≠t)")
        ax2.set_title("Dung T√≠ch Ph·ªïi theo T√¨nh Tr·∫°ng H√∫t Thu·ªëc")
        st.pyplot(fig2)
        pdf_buffer2 = save_fig_to_pdf(fig2)
        st.download_button(
            label="L∆∞u bi·ªÉu ƒë·ªì d∆∞·ªõi d·∫°ng PDF",
            data=pdf_buffer2,
            file_name="DungTichPhoi_Theo_HutThuoc_Scatter.pdf",
            mime="application/pdf"
        )

    elif analysis_page == "L∆∞·ª£t Kh√°m B·ªánh":
        st.subheader("L∆∞·ª£t Kh√°m B·ªánh Trung B√¨nh theo Lo·∫°i B·ªánh")
        selected_diseases = st.multiselect("Ch·ªçn Lo·∫°i B·ªánh:", df["Lo·∫°i B·ªánh"].unique()) 
        if selected_diseases:
            visits_per_disease = df[df["Lo·∫°i B·ªánh"].isin(selected_diseases)].groupby("Lo·∫°i B·ªánh")["S·ªë L∆∞·ª£t Kh√°m B·ªánh"].apply(lambda x: x.dropna().mean())
            fig = plt.figure(figsize=(10, 6))
            visits_per_disease.plot(kind='bar')
            plt.title("L∆∞·ª£t Kh√°m B·ªánh Trung B√¨nh theo Lo·∫°i B·ªánh")
            plt.xlabel("Lo·∫°i B·ªánh")
            plt.ylabel("S·ªë L∆∞·ª£t Kh√°m Trung B√¨nh")
            st.pyplot(fig)
            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="L∆∞u bi·ªÉu ƒë·ªì d∆∞·ªõi d·∫°ng PDF",
                data=pdf_buffer,
                file_name="LuotKhamBenh_Theo_LoaiBenh.pdf",
                mime="application/pdf"
            )

    elif analysis_page == "T∆∞∆°ng Quan":
        st.subheader("Bi·ªÉu ƒê·ªì T∆∞∆°ng Quan (Heatmap)")
        encoded_data = encode_data(df)
        corr_matrix = encoded_data.corr(numeric_only=True)
        fig, ax = plt.subplots(figsize=(10, 8))
        sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5, ax=ax)
        ax.set_title("T∆∞∆°ng Quan Gi·ªØa C√°c Bi·∫øn S·ªë")
        st.pyplot(fig)
        pdf_buffer = save_fig_to_pdf(fig)
        st.download_button(
            label="L∆∞u bi·ªÉu ƒë·ªì d∆∞·ªõi d·∫°ng PDF",
            data=pdf_buffer,
            file_name="TuongQuan.pdf",
            mime="application/pdf"
        )

        with st.expander("Xem Nh·∫≠n X√©t Chi Ti·∫øt"):
            st.markdown("""
            **Bi·ªÉu ƒë·ªì Nhi·ªát T∆∞∆°ng Quan (Heatmap):**

            **Ph√¢n T√≠ch T∆∞∆°ng Quan Gi·ªØa C√°c Bi·∫øn S·ªë:**

            **1. T∆∞∆°ng Quan M·∫°nh (G·∫ßn 1.0 ho·∫∑c -1.0):**

            *   **ƒê∆∞·ªùng ch√©o ch√≠nh (Diagonal):**  C√°c √¥ n·∫±m tr√™n ƒë∆∞·ªùng ch√©o ch√≠nh c√≥ gi√° tr·ªã 1.00 (m√†u ƒë·ªè ƒë·∫≠m), th·ªÉ hi·ªán s·ª± t∆∞∆°ng quan ho√†n h·∫£o c·ªßa m·ªôt bi·∫øn s·ªë v·ªõi ch√≠nh n√≥ (v√≠ d·ª•: "Tu·ªïi" t∆∞∆°ng quan ho√†n h·∫£o v·ªõi "Tu·ªïi"). ƒêi·ªÅu n√†y l√† hi·ªÉn nhi√™n v√† kh√¥ng mang nhi·ªÅu √Ω nghƒ©a ph√¢n t√≠ch.

            **2. T∆∞∆°ng Quan Y·∫øu ho·∫∑c Kh√¥ng T∆∞∆°ng Quan (G·∫ßn 0.0 - M√†u Tr·∫Øng):**

            *   H·∫ßu h·∫øt c√°c √¥ ngo√†i ƒë∆∞·ªùng ch√©o ch√≠nh c√≥ m√†u tr·∫Øng ho·∫∑c m√†u nh·∫°t, v·ªõi gi√° tr·ªã h·ªá s·ªë t∆∞∆°ng quan g·∫ßn 0.0 (v√≠ d·ª•: -0.01, 0.01, 0.02, -0.02, -0.00, -0.04).
            *   **Nh·∫≠n x√©t:** ƒêi·ªÅu n√†y cho th·∫•y r·∫±ng **h·∫ßu h·∫øt c√°c bi·∫øn s·ªë trong t·∫≠p d·ªØ li·ªáu n√†y kh√¥ng c√≥ t∆∞∆°ng quan tuy·∫øn t√≠nh m·∫°nh m·∫Ω v·ªõi nhau**.  C√°c m·ªëi t∆∞∆°ng quan gi·ªØa c√°c c·∫∑p bi·∫øn s·ªë nh∆∞:
                *   Tu·ªïi v√† Gi·ªõi T√≠nh (-0.01)
                *   Tu·ªïi v√† T√¨nh Tr·∫°ng H√∫t Thu·ªëc (0.01)
                *   Tu·ªïi v√† Dung T√≠ch Ph·ªïi (0.02)
                *   Tu·ªïi v√† Lo·∫°i B·ªánh (0.02)
                *   Tu·ªïi v√† Lo·∫°i ƒêi·ªÅu Tr·ªã (-0.01)
                *   Tu·ªïi v√† S·ªë L∆∞·ª£t Kh√°m B·ªánh (0.02)
                *   Tu·ªïi v√† H·ªìi Ph·ª•c (-0.00)
                *   ... v√† t∆∞∆°ng t·ª± cho c√°c bi·∫øn s·ªë kh√°c ...
                ƒë·ªÅu r·∫•t y·∫øu v√† g·∫ßn nh∆∞ kh√¥ng ƒë√°ng k·ªÉ v·ªÅ m·∫∑t th·ªëng k√™.

            **3. Kh√¥ng C√≥ T∆∞∆°ng Quan √Çm M·∫°nh:**

            *   Kh√¥ng c√≥ √¥ n√†o trong heatmap c√≥ m√†u xanh lam ƒë·∫≠m, v√† c√°c gi√° tr·ªã √¢m ƒë·ªÅu r·∫•t g·∫ßn 0 (v√≠ d·ª•: -0.01, -0.02, -0.04).
            *   **Nh·∫≠n x√©t:**  ƒêi·ªÅu n√†y cho th·∫•y **kh√¥ng c√≥ m·ªëi t∆∞∆°ng quan ngh·ªãch m·∫°nh n√†o gi·ªØa c√°c bi·∫øn s·ªë ƒë∆∞·ª£c xem x√©t**.  N√≥i c√°ch kh√°c, s·ª± thay ƒë·ªïi c·ªßa m·ªôt bi·∫øn s·ªë kh√¥ng c√≥ xu h∆∞·ªõng l√†m gi·∫£m m·∫°nh gi√° tr·ªã c·ªßa m·ªôt bi·∫øn s·ªë kh√°c trong c√°c c·∫∑p ƒë∆∞·ª£c x√©t.

            **T√≥m l·∫°i:**

            Bi·ªÉu ƒë·ªì heatmap n√†y cho th·∫•y r·∫±ng **trong t·∫≠p d·ªØ li·ªáu ƒë∆∞·ª£c ph√¢n t√≠ch, kh√¥ng c√≥ m·ªëi t∆∞∆°ng quan tuy·∫øn t√≠nh m·∫°nh m·∫Ω n√†o gi·ªØa c√°c bi·∫øn s·ªë "Tu·ªïi", "Gi·ªõi T√≠nh", "T√¨nh Tr·∫°ng H√∫t Thu·ªëc", "Dung T√≠ch Ph·ªïi", "Lo·∫°i B·ªánh", "Lo·∫°i ƒêi·ªÅu Tr·ªã", "S·ªë L∆∞·ª£t Kh√°m B·ªánh" v√† "H·ªìi Ph·ª•c"**.  C√°c gi√° tr·ªã t∆∞∆°ng quan ƒë·ªÅu r·∫•t g·∫ßn 0, cho th·∫•y c√°c bi·∫øn s·ªë n√†y c√≥ xu h∆∞·ªõng ƒë·ªôc l·∫≠p v·ªõi nhau ho·∫∑c ch·ªâ c√≥ m·ªëi li√™n h·ªá r·∫•t y·∫øu.

            **L∆∞u √Ω:**

            *   **T∆∞∆°ng quan kh√¥ng ph·∫£i l√† nh√¢n qu·∫£:**  Vi·ªác kh√¥ng c√≥ t∆∞∆°ng quan m·∫°nh kh√¥ng c√≥ nghƒ©a l√† kh√¥ng c√≥ m·ªëi quan h·ªá n√†o gi·ªØa c√°c bi·∫øn s·ªë. C√≥ th·ªÉ c√≥ c√°c m·ªëi quan h·ªá phi tuy·∫øn t√≠nh ho·∫∑c c√°c m·ªëi quan h·ªá ph·ª©c t·∫°p kh√°c m√† t∆∞∆°ng quan tuy·∫øn t√≠nh kh√¥ng th·ªÉ ph√°t hi·ªán.
            *   **C·∫ßn xem x√©t c√°c y·∫øu t·ªë kh√°c:** ƒê·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ m·ªëi quan h·ªá gi·ªØa c√°c y·∫øu t·ªë n√†y v√† b·ªánh ph·ªïi, c·∫ßn ph√¢n t√≠ch s√¢u h∆°n b·∫±ng c√°c ph∆∞∆°ng ph√°p th·ªëng k√™ kh√°c v√† xem x√©t c√°c y·∫øu t·ªë ti·ªÅm ·∫©n kh√°c kh√¥ng ƒë∆∞·ª£c th·ªÉ hi·ªán trong heatmap n√†y.
            """)
    
    elif analysis_page == "Ph√¢n T√≠ch Song Bi·∫øn (Bivariate Analysis)":        
        st.subheader("Ph√¢n T√≠ch Song Bi·∫øn")
        num_col = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
        feature_x = st.selectbox("Ch·ªçn bi·∫øn X:", num_col)
        feature_y = st.selectbox("Ch·ªçn bi·∫øn Y:", num_col)
        plot_type = st.radio("Lo·∫°i bi·ªÉu ƒë·ªì:", ["Scatter", "2D KDE"])
        if feature_x != feature_y:
            fig, ax = plt.subplots(figsize=(10, 6))
            if plot_type == "Scatter":
                sns.scatterplot(x=df[feature_x], y=df[feature_y], hue=df["H·ªìi Ph·ª•c"], palette=PALETTE[:2], ax=ax)
            elif plot_type == "2D KDE":
                sns.kdeplot(x=df[feature_x], y=df[feature_y], cmap="Blues", fill=True, ax=ax)
            ax.set_title(f"{feature_x} vs {feature_y} ({plot_type})")
            st.pyplot(fig)
            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="L∆∞u bi·ªÉu ƒë·ªì d∆∞·ªõi d·∫°ng PDF",
                data=pdf_buffer,
                file_name=f"{feature_x}_vs_{feature_y}_{plot_type}.pdf",
                mime="application/pdf"
            )

    elif analysis_page == "T·ª∑ l·ªá h·ªìi ph·ª•c":   
        st.subheader("Ph√¢n T√≠ch T·ª∑ l·ªá h·ªìi ph·ª•c")
        factor = st.selectbox("Ch·ªçn y·∫øu t·ªë ƒë·ªÉ so s√°nh T·ª∑ l·ªá h·ªìi ph·ª•c:", 
                            ["T√¨nh Tr·∫°ng H√∫t Thu·ªëc", "Lo·∫°i B·ªánh", "Lo·∫°i ƒêi·ªÅu Tr·ªã"])
        def rec_rate(data, factor):
            recovery_rate = data.groupby(factor)["H·ªìi Ph·ª•c"].value_counts(normalize=True).unstack().fillna(0)
            return recovery_rate
        recovery_data = rec_rate(df, factor)
        fig, ax = plt.subplots(figsize=(10, 6))
        recovery_data.plot(kind='bar', stacked=True, color=PALETTE[:2], ax=ax)
        for p in ax.patches:
            width, height = p.get_width(), p.get_height()
            x, y = p.get_xy() 
            ax.text(x + width/2, y + height/2, f"{height:.0%}", ha='center', va='center')
        ax.set_title(f"T·ª∑ l·ªá h·ªìi ph·ª•c theo {factor}")
        ax.set_ylabel("T·ª∑ l·ªá")
        ax.legend(title="H·ªìi Ph·ª•c", labels=["Kh√¥ng", "C√≥"])
        plt.xticks(rotation=45, ha="right")
        st.pyplot(fig)
        pdf_buffer = save_fig_to_pdf(fig)
        st.download_button(
            label="L∆∞u bi·ªÉu ƒë·ªì d∆∞·ªõi d·∫°ng PDF",
            data=pdf_buffer,
            file_name=f"TyLeHoiPhuc_Theo_{factor}.pdf",
            mime="application/pdf"
        )

    elif analysis_page == "Dung L∆∞·ª£ng Ph·ªïi Trung B√¨nh Theo Nh√≥m Tu·ªïi v√† Lo·∫°i B·ªánh":
        st.subheader("Dung L∆∞·ª£ng Ph·ªïi Trung B√¨nh Theo Nh√≥m Tu·ªïi v√† Lo·∫°i B·ªánh")
        df['Nh√≥m Tu·ªïi'] = pd.cut(df['Tu·ªïi'], bins=[0, 20, 40, 60, 80, 100], labels=['0-20', '21-40', '41-60', '61-80', '81+'])
        lung_capacity_by_age_disease = df.groupby(['Nh√≥m Tu·ªïi', 'Lo·∫°i B·ªánh'])['Dung T√≠ch Ph·ªïi'].mean().unstack()
        fig_age_lung = px.imshow(
            lung_capacity_by_age_disease, 
            title="Dung L∆∞·ª£ng Ph·ªïi Trung B√¨nh Theo Nh√≥m Tu·ªïi v√† Lo·∫°i B·ªánh",
            labels=dict(x="Lo·∫°i B·ªánh", y="Nh√≥m Tu·ªïi", color="Dung L∆∞·ª£ng Ph·ªïi"),
            color_continuous_scale="YlGnBu"
        )
        st.plotly_chart(fig_age_lung, use_container_width=True)
        # Note: Plotly charts need a different approach for PDF export; skipping here for simplicity

# --- Trang 4: Nh·∫≠n X√©t Chung ---
elif page == "4. Nh·∫≠n X√©t Chung":
    st.header("4. Nh·∫≠n X√©t Chung")
    avg_age = df["Tu·ªïi"].mean()
    smoking_rate = (df["T√¨nh Tr·∫°ng H√∫t Thu·ªëc"] == "C√≥").mean() * 100
    avg_hospital_visits = df["S·ªë L∆∞·ª£t Kh√°m B·ªánh"].mean()
    male_percentage = (df["Gi·ªõi T√≠nh"] == "Nam").mean() * 100
    female_percentage = (df["Gi·ªõi T√≠nh"] == "N·ªØ").mean() * 100
    st.markdown(f"""
    - **T·ªïng Quan v·ªÅ D·ªØ Li·ªáu v√† K·∫øt Qu·∫£ Ph√¢n T√≠ch:**
        - **M·ªëi T∆∞∆°ng Quan gi·ªØa H√∫t Thu·ªëc v√† Dung T√≠ch Ph·ªïi:** D·ªØ li·ªáu cho th·∫•y nh·ªØng b·ªánh nh√¢n h√∫t thu·ªëc c√≥ xu h∆∞·ªõng c√≥ dung t√≠ch ph·ªïi th·∫•p h∆°n (xem boxplot).
        - **Ph·ªï Bi·∫øn c·ªßa B·ªánh:** C√°c lo·∫°i b·ªánh ph·ªïi ph·ªï bi·∫øn nh·∫•t trong t·∫≠p d·ªØ li·ªáu c·∫ßn ƒë∆∞·ª£c x√°c ƒë·ªãnh t·ª´ bi·ªÉu ƒë·ªì ph√¢n b·ªë lo·∫°i b·ªánh.
        - **Tu·ªïi Trung B√¨nh c·ªßa B·ªánh Nh√¢n:** {avg_age:.2f} tu·ªïi.
        - **T·ª∑ L·ªá H√∫t Thu·ªëc:** {smoking_rate:.2f}%.
        - **S·ªë L∆∞·ª£t Kh√°m B·ªánh:** Trung b√¨nh {avg_hospital_visits:.2f} l∆∞·ª£t.
        - **Gi·ªõi T√≠nh:** Nam: {male_percentage:.2f}%, N·ªØ: {female_percentage:.2f}%.
    """)