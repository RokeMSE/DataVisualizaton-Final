import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import plotly.express as px
from matplotlib.backends.backend_pdf import PdfPages
from io import BytesIO, StringIO
import csv
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from collections import Counter
import re
import google.generativeai as genai
import os
from dotenv import load_dotenv

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(page_title="Ph√¢n T√≠ch Tuy·ªÉn D·ª•ng Vi·ªát Nam", page_icon="üíº", layout="wide", initial_sidebar_state="expanded")

# Thi·∫øt l·∫≠p b·∫£ng m√†u
sns.set_palette("colorblind")
PALETTE = ["#88CCEE", "#44AA99", "#117733", "#999933", "#DDCC77", "#CC6677", "#882255", "#AA4499"]

# --- Load Environment Variables ---
load_dotenv()  # Load variables from .env file
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# --- Configure AI ---
MODEL_NAME = "gemini-2.0-flash"

        
# --- H√†m t·∫°o PDF t·ª´ figure ---
def save_fig_to_pdf(fig):
    buffer = BytesIO()
    with PdfPages(buffer) as pdf:
        pdf.savefig(fig, bbox_inches='tight')
    buffer.seek(0)
    return buffer

# --- H√†m t·∫£i v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ---
@st.cache_data(show_spinner=False)
def load_and_preprocess_data(file):
    try:
        df = pd.read_csv(file, encoding='utf-8', quoting=csv.QUOTE_ALL, na_values=["None", " ", "UNKNOWN", -1, 999, "NA", "N/A", "NULL"])
        numeric_cols = ['min_salary_mil_vnd', 'max_salary_mil_vnd', 'min_experience_years', 'max_experience_years']
        for col in numeric_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        categorical_cols = ['primary_location', 'primary_category', 'position', 'order']
        for col in categorical_cols:
            df[col] = df[col].astype('category')
        # ƒê·∫£m b·∫£o c·ªôt job_requirements l√† chu·ªói
        if 'job_requirements' in df.columns:
            df['job_requirements'] = df['job_requirements'].astype(str).fillna('')
        return df
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")
        st.stop()

# --- H√†m d·ª± ƒëo√°n l∆∞∆°ng ---
def predict_salary(df):
    # Ch·ªçn c√°c ƒë·∫∑c tr∆∞ng v√† m·ª•c ti√™u
    features = ['min_experience_years', 'primary_category', 'primary_location']
    target = 'min_salary_mil_vnd'
    
    # L·ªçc d·ªØ li·ªáu
    df_model = df[features + [target]].dropna()
    if df_model.empty:
        return None, None, None
    
    X = df_model[features]
    y = df_model[target]
    
    # Chia d·ªØ li·ªáu th√†nh t·∫≠p hu·∫•n luy·ªán v√† ki·ªÉm tra
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # T·∫°o pipeline v·ªõi m√£ h√≥a one-hot cho c√°c c·ªôt ph√¢n lo·∫°i
    preprocessor = ColumnTransformer(
        transformers=[
            ('cat', OneHotEncoder(handle_unknown='ignore'), ['primary_category', 'primary_location']),
            ('num', 'passthrough', ['min_experience_years'])
        ])
    
    model = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('regressor', LinearRegression())
    ])
    
    # Hu·∫•n luy·ªán m√¥ h√¨nh
    model.fit(X_train, y_train)
    
    # D·ª± ƒëo√°n tr√™n t·∫≠p ki·ªÉm tra
    y_pred = model.predict(X_test)
    
    # T·∫°o DataFrame cho k·∫øt qu·∫£
    results = pd.DataFrame({
        'Actual': y_test,
        'Predicted': y_pred
    })
    
    return model, results, X_test

# --- H√†m tr√≠ch xu·∫•t k·ªπ nƒÉng ---
def extract_skills(df):
    # Danh s√°ch k·ªπ nƒÉng ph·ªï bi·∫øn (c√≥ th·ªÉ m·ªü r·ªông)
    skills_list = [
        'python', 'sql', 'java', 'javascript', 'aws', 'docker', 'kubernetes',
        'excel', 'power bi', 'tableau', 'management', 'communication', 'leadership',
        'marketing', 'sales', 'finance', 'accounting', 'design', 'ui/ux'
    ]
    
    # G·ªôp t·∫•t c·∫£ job_requirements th√†nh m·ªôt vƒÉn b·∫£n
    text = ' '.join(df['job_requirements'].str.lower())
    
    # T√¨m c√°c k·ªπ nƒÉng trong vƒÉn b·∫£n
    skill_counts = Counter()
    for skill in skills_list:
        count = len(re.findall(r'\b' + re.escape(skill) + r'\b', text))
        if count > 0:
            skill_counts[skill] = count
    
    # L·∫•y top 10 k·ªπ nƒÉng
    top_skills = skill_counts.most_common(10)
    return pd.DataFrame(top_skills, columns=['Skill', 'Count'])

# --- H√†m v·∫Ω ph√¢n ph·ªëi m·ª©c l∆∞∆°ng theo danh m·ª•c ---
def plot_salary_by_category(df, chart_type='Box'):
    filtered_df = df[['primary_category', 'min_salary_mil_vnd']].dropna()
    top_categories = filtered_df['primary_category'].value_counts().index[:10]
    filtered_df = filtered_df[filtered_df['primary_category'].isin(top_categories)]
    
    if chart_type == 'Box':
        fig, ax = plt.subplots(figsize=(12, 7))
        sns.boxplot(x='min_salary_mil_vnd', y='primary_category', data=filtered_df, palette=PALETTE, ax=ax)
        ax.set_title('Ph√¢n ph·ªëi M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu theo Danh m·ª•c C√¥ng vi·ªác', fontsize=14, pad=15)
        ax.set_xlabel('M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu (Tri·ªáu VND)', fontsize=12)
        ax.set_ylabel('Danh m·ª•c C√¥ng vi·ªác', fontsize=12)
        plt.tight_layout()
    else:
        fig, axes = plt.subplots(2, 5, figsize=(20, 10))
        axes = axes.flatten()
        for idx, category in enumerate(top_categories):
            if idx < len(axes):
                sns.histplot(filtered_df[filtered_df['primary_category'] == category]['min_salary_mil_vnd'], 
                             kde=True, ax=axes[idx], color=PALETTE[idx % len(PALETTE)])
                axes[idx].set_title(f'{category}', fontsize=10)
                axes[idx].set_xlabel('M·ª©c l∆∞∆°ng (Tri·ªáu VND)')
                axes[idx].set_ylabel('S·ªë l∆∞·ª£ng')
        for idx in range(len(top_categories), len(axes)):
            axes[idx].axis('off')
        plt.suptitle('Ph√¢n ph·ªëi M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu theo Danh m·ª•c', fontsize=14, y=1.05)
        plt.tight_layout()
    
    return fig

# --- H√†m v·∫Ω ·∫£nh h∆∞·ªüng c·ªßa kinh nghi·ªám ƒë·∫øn m·ª©c l∆∞∆°ng ---
def plot_experience_salary(df, chart_type='Box'):
    filtered_df = df[['min_experience_years', 'min_salary_mil_vnd']].dropna()
    filtered_df = filtered_df.replace([np.inf, -np.inf], np.nan).dropna()
    filtered_df = filtered_df[filtered_df['min_experience_years'] <= 5]
    
    if chart_type == 'Box':
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.boxplot(x='min_experience_years', y='min_salary_mil_vnd', data=filtered_df, palette="coolwarm", ax=ax)
        ax.set_title('Ph√¢n ph·ªëi M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu theo Kinh nghi·ªám (0-5 NƒÉm)', fontsize=14, pad=15)
        ax.set_xlabel('Kinh nghi·ªám T·ªëi thi·ªÉu (NƒÉm)', fontsize=12)
        ax.set_ylabel('M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu (Tri·ªáu VND)', fontsize=12)
        plt.tight_layout()
    else:
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.scatterplot(x='min_experience_years', y='min_salary_mil_vnd', data=filtered_df, 
                        color=PALETTE[0], alpha=0.5, ax=ax)
        ax.set_title('M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu theo Kinh nghi·ªám (0-5 NƒÉm)', fontsize=14, pad=15)
        ax.set_xlabel('Kinh nghi·ªám T·ªëi thi·ªÉu (NƒÉm)', fontsize=12)
        ax.set_ylabel('M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu (Tri·ªáu VND)', fontsize=12)
        plt.tight_layout()
    
    return fig

# --- T·∫£i d·ªØ li·ªáu c·ªë ƒë·ªãnh ---
DATA_FILE = "Data/cleaned_vietnamese_job_posting.csv"
try:
    df = load_and_preprocess_data(DATA_FILE)
except FileNotFoundError:
    st.error(f"üö® Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu: {DATA_FILE}. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n v√† th·ª≠ l·∫°i.")
    st.stop()

# --- CSS ---
st.markdown("""
    <style>
    div[role="radiogroup"] label {
        display: flex;
        align-items: center;
        font-size: 18px;
        font-weight: bold;
        color: #333;
        padding: 10px 15px;
        border-radius: 8px;
        transition: background-color 0.3s ease, transform 0.2s ease;
        cursor: pointer;
    }
    div[role="radiogroup"] label span {
        visibility: hidden;
        width: 0;
        margin: 0;
        padding: 0;
    }
    div[role="radiogroup"] label:hover {
        background-color: #FF851B;
        color: white !important;
        transform: scale(1.02);
    }
    div[role="radiogroup"] label[data-selected="true"] {
        background-color: #FF851B !important;
        color: white !important;
        font-weight: bold;
    }
    </style>
""", unsafe_allow_html=True)

st.title("üíº B·∫£ng ƒêi·ªÅu Khi·ªÉn Ph√¢n T√≠ch Tuy·ªÉn D·ª•ng Vi·ªát Nam")
page = st.sidebar.radio("Ch·ªçn Trang", [
    "1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu",
    "2. Th·ªëng K√™ M√¥ T·∫£",
    "3. Ph√¢n T√≠ch Chuy√™n S√¢u",
    "4. Nh·∫≠n X√©t Chung",
], index=0)

# --- Trang 1: Gi·ªõi Thi·ªáu D·ªØ Li·ªáu ---
if page == "1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu":
    st.header("üìä 1. Gi·ªõi Thi·ªáu D·ªØ Li·ªáu")

    st.markdown("""
        <style>
        .highlight {
            color: #FF851B;
            font-weight: bold;
        }
        </style>
    """, unsafe_allow_html=True)

    tab1, tab2 = st.tabs(["üìú Ngu·ªìn G·ªëc D·ªØ Li·ªáu", "üìã M√¥ T·∫£ D·ªØ Li·ªáu"])

    with tab1:
        st.subheader("Ngu·ªìn G·ªëc D·ªØ Li·ªáu")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(label="S·ªë B·∫£n Ghi Ban ƒê·∫ßu", value="2056", delta=None)
        with col2:
            st.metric(label="S·ªë B·∫£n Ghi Sau X·ª≠ L√Ω", value="1945", delta="-111", delta_color="inverse")
        with col3:
            st.metric(label="Th·ªùi Gian Thu Th·∫≠p", value="02/2023 - 03/2023", delta=None)

        st.markdown("""
        - D·ªØ li·ªáu ƒë∆∞·ª£c thu th·∫≠p t·ª´ c√°c b√†i ƒëƒÉng tuy·ªÉn d·ª•ng tr√™n trang web <span class="highlight">CareerBuilder.vn</span>.
        - D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch ƒë·ªÉ lo·∫°i b·ªè HTML, c√°c c·ª•m t·ª´ kh√¥ng mong mu·ªën, v√† x·ª≠ l√Ω c√°c c·ªôt nh∆∞ m·ª©c l∆∞∆°ng, kinh nghi·ªám, v√† ƒë·ªãa ƒëi·ªÉm.
        """, unsafe_allow_html=True)

    with tab2:
        st.subheader("M√¥ T·∫£ D·ªØ Li·ªáu")

        with st.expander("üìù Xem Chi Ti·∫øt C√°c C·ªôt D·ªØ Li·ªáu"):
            st.markdown("""
            - **job_title:** T√™n v·ªã tr√≠ tuy·ªÉn d·ª•ng.
            - **job_id:** M√£ ƒë·ªãnh danh duy nh·∫•t cho b√†i ƒëƒÉng.
            - **company_title:** T√™n c√¥ng ty tuy·ªÉn d·ª•ng.
            - **salary:** M·ª©c l∆∞∆°ng (ƒë√£ x·ª≠ l√Ω th√†nh min_salary_mil_vnd v√† max_salary_mil_vnd, ƒë∆°n v·ªã tri·ªáu VND).
            - **location:** ƒê·ªãa ƒëi·ªÉm l√†m vi·ªác (ƒë√£ x·ª≠ l√Ω th√†nh primary_location).
            - **outstanding_welfare:** Quy·ªÅn l·ª£i n·ªïi b·∫≠t.
            - **category:** Danh m·ª•c c√¥ng vi·ªác (ƒë√£ x·ª≠ l√Ω th√†nh primary_category).
            - **position:** C·∫•p b·∫≠c v·ªã tr√≠.
            - **exp:** Kinh nghi·ªám y√™u c·∫ßu (ƒë√£ x·ª≠ l√Ω th√†nh min_experience_years v√† max_experience_years).
            - **order:** Lo·∫°i h·ª£p ƒë·ªìng.
            - **detailed_welfare:** Quy·ªÅn l·ª£i chi ti·∫øt.
            - **job_description:** M√¥ t·∫£ c√¥ng vi·ªác.
            - **job_requirements:** Y√™u c·∫ßu c√¥ng vi·ªác.
            - **job_tags:** T·ª´ kh√≥a li√™n quan ƒë·∫øn c√¥ng vi·ªác.
            - **primary_location:** ƒê·ªãa ƒëi·ªÉm l√†m vi·ªác ch√≠nh.
            - **primary_category:** Danh m·ª•c c√¥ng vi·ªác ch√≠nh.
            """)

        buffer = BytesIO()
        with PdfPages(buffer) as pdf:
            fig, ax = plt.subplots(figsize=(8, 6))
            ax.text(0.5, 0.5, "C·∫•u tr√∫c d·ªØ li·ªáu:\n\n" + 
                    "job_title: T√™n v·ªã tr√≠\n" +
                    "job_id: M√£ ƒë·ªãnh danh\n" +
                    "company_title: T√™n c√¥ng ty\n" +
                    "... (xem chi ti·∫øt trong dashboard)", 
                    ha='center', va='center', fontsize=12)
            ax.axis('off')
            pdf.savefig(fig, bbox_inches='tight')
            plt.close(fig)
        buffer.seek(0)
        st.download_button(
            label="üì• T·∫£i Xu·ªëng C·∫•u Tr√∫c D·ªØ Li·ªáu (PDF)",
            data=buffer,
            file_name="cau_truc_du_lieu.pdf",
            mime="application/pdf"
        )

    st.subheader("üóÇ Xem D·ªØ Li·ªáu ƒê√£ X·ª≠ L√Ω")
    st.dataframe(df.style.set_properties(**{
        'background-color': '#f9f9f9',
        'border': '1px solid #e0e0e0',
        'padding': '5px',
        'text-align': 'left'
    }), height=300)

# --- Trang 2: Th·ªëng K√™ M√¥ T·∫£ ---
elif page == "2. Th·ªëng K√™ M√¥ T·∫£":
    st.header("üìà 2. Th·ªëng K√™ M√¥ T·∫£")

    st.markdown("""
        <style>
        .section-title {
            font-size: 24px;
            font-weight: 500;
            margin-bottom: 15px;
            color: #333333;
        }
        .chart-title {
            font-size: 18px;
            font-weight: bold;
            color: #FF851B;
            margin-bottom: 10px;
        }
        .debug-expander {
            background-color: #f9f9f9;
            padding: 10px;
            border-radius: 5px;
        }
        </style>
    """, unsafe_allow_html=True)

    tab1, tab2, tab3 = st.tabs(["üìä Th√¥ng Tin D·ªØ Li·ªáu", "üìà Ph√¢n Ph·ªëi Bi·∫øn S·ªë", "üìâ Ph√¢n Ph·ªëi Bi·∫øn Ph√¢n Lo·∫°i"])

    with tab1:
        st.markdown('<div class="section-title">Th√¥ng Tin D·ªØ Li·ªáu</div>', unsafe_allow_html=True)
        st.dataframe(df.describe(include='all').style.set_properties(**{
            'background-color': '#ffffff',
            'border': '1px solid #e0e0e0',
            'padding': '5px',
            'text-align': 'left'
        }), height=300)

    with tab2:
        st.markdown('<div class="section-title">Ph√¢n Ph·ªëi Bi·∫øn S·ªë</div>', unsafe_allow_html=True)
        numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
        num_select = st.selectbox("Ch·ªçn m·ªôt bi·∫øn s·ªë ƒë·ªÉ xem ph√¢n ph·ªëi:", numeric_cols)
        if num_select:
            chart_type = st.radio("Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:", ["Histogram (v·ªõi KDE)", "Boxplot", "KDE Plot"])
            st.markdown('<div class="chart-title">Bi·ªÉu ƒê·ªì Ph√¢n Ph·ªëi</div>', unsafe_allow_html=True)
            fig, ax = plt.subplots(figsize=(14, 7))

            if chart_type == "Histogram (v·ªõi KDE)":
                sns.histplot(df[num_select].dropna(), kde=True, color=PALETTE[0], ax=ax)
                ax.set_title(f"Ph√¢n b·ªë c·ªßa {num_select} (Histogram v·ªõi KDE)", fontsize=14, pad=15)
            elif chart_type == "Boxplot":
                sns.boxplot(y=df[num_select].dropna(), color=PALETTE[1], ax=ax)
                ax.set_title(f"Ph√¢n b·ªë c·ªßa {num_select} (Boxplot)", fontsize=14, pad=15)
            elif chart_type == "KDE Plot":
                sns.kdeplot(df[num_select].dropna(), color=PALETTE[2], fill=True, ax=ax)
                ax.set_title(f"Ph√¢n b·ªë c·ªßa {num_select} (KDE Plot)", fontsize=14, pad=15)

            ax.set_xlabel(num_select, fontsize=12)
            ax.set_ylabel('S·ªë l∆∞·ª£ng' if chart_type != "Boxplot" else '', fontsize=12)
            plt.tight_layout()
            st.pyplot(fig)
            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                data=pdf_buffer,
                file_name=f"PhanBo_{num_select}_{chart_type}.pdf",
                mime="application/pdf"
            )


    with tab3:
        st.markdown('<div class="section-title">Ph√¢n Ph·ªëi Bi·∫øn Ph√¢n Lo·∫°i</div>', unsafe_allow_html=True)

        st.markdown('<div class="filter-box">', unsafe_allow_html=True)
        unique_locations = df['primary_location'].dropna().unique().tolist()
        selected_locations = st.multiselect(
            "üìç L·ªçc theo ƒë·ªãa ƒëi·ªÉm:",
            options=unique_locations,
            default=unique_locations,
            key="filter_locations_categorical"
        )
        st.markdown('</div>', unsafe_allow_html=True)

        filtered_df = df.copy()
        if selected_locations:
            filtered_df = filtered_df[filtered_df['primary_location'].isin(selected_locations)]

        if filtered_df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi l·ªçc. Vui l√≤ng ch·ªçn l·∫°i ƒë·ªãa ƒëi·ªÉm.")
        else:
            cat_cols = ['order', 'position', 'primary_category']
            cat_select = st.selectbox("Ch·ªçn m·ªôt bi·∫øn ph√¢n lo·∫°i ƒë·ªÉ xem ph√¢n ph·ªëi:", cat_cols)

            if cat_select:
                grouped = filtered_df.groupby('primary_location')[cat_select].value_counts().unstack(fill_value=0)
                grouped = grouped.reindex(selected_locations)
                grouped = grouped.sort_index(ascending=False)
                
                fig, ax = plt.subplots(figsize=(20, 16))
                grouped.plot(kind='bar', stacked=True, ax=ax, colormap='tab20')
                ax.set_title(f"Ph√¢n Ph·ªëi '{cat_select}' Theo ƒê·ªãa ƒêi·ªÉm ƒê√£ Ch·ªçn", fontsize=16, pad=10)
                ax.set_xlabel("ƒê·ªãa ƒëi·ªÉm", fontsize=14)
                ax.set_ylabel("S·ªë l∆∞·ª£ng", fontsize=14)
                
                plt.xticks(rotation=90, ha='right')
                plt.tight_layout()
                st.pyplot(fig)

                pdf_buffer = save_fig_to_pdf(fig)
                st.download_button(
                    label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                    data=pdf_buffer,
                    file_name=f"PhanBo_{cat_select}_TheoDiaDiem.pdf",
                    mime="application/pdf"
                )

# --- Trang 3: Ph√¢n T√≠ch Chuy√™n S√¢u ---
elif page == "3. Ph√¢n T√≠ch Chuy√™n S√¢u":
    st.header("üîç 3. Ph√¢n T√≠ch Chuy√™n S√¢u")

    st.markdown("""
        <style>
        .section-title {
            font-size: 24px;
            font-weight: 500;
            margin-bottom: 15px;
            color: #333333;
        }
        .chart-title {
            font-size: 18px;
            font-weight: bold;
            color: #FF851B;
            margin-bottom: 10px;
        }
        .filter-box {
            background-color: #f9f9f9;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 15px;
        }
        </style>
    """, unsafe_allow_html=True)

    tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8, tab9, tab10 = st.tabs([
        "üìä Th·ªëng K√™ Chung",
        "üìà S·ªë l∆∞·ª£ng tin tuy·ªÉn d·ª•ng theo danh m·ª•c",
        "üí∞ M·ª©c L∆∞∆°ng Theo Danh M·ª•c",
        "üïí Kinh Nghi·ªám & M·ª©c L∆∞∆°ng",
        "üìç Ph√¢n B·ªë ƒê·ªãa ƒêi·ªÉm",
        "üîó T∆∞∆°ng Quan",
        "üìà Ph√¢n T√≠ch Song Bi·∫øn",
        "üìà Xu H∆∞·ªõng Theo Th·ªùi Gian",
        "üåü D·ª± ƒëo√°n",
        "ü§ñ Ph√¢n T√≠ch AI v·ªõi Google Gemini"
    ])

    with tab1:
        total_jobs = len(df)
        avg_min_salary = df["min_salary_mil_vnd"].mean()
        avg_max_salary = df["max_salary_mil_vnd"].mean()
        top_location = df["primary_location"].mode()[0] if not df["primary_location"].empty else "N/A"
        top_category = df["primary_category"].mode()[0] if not df["primary_category"].empty else "N/A"
        location_percentage = (df["primary_location"] == top_location).mean() * 100
        total_categories = df["primary_category"].nunique()
        total_locations = df["primary_location"].nunique()
        max_min_salary = df["min_salary_mil_vnd"].max()
        max_max_salary = df["max_salary_mil_vnd"].max()
        highest_salary_category = df.groupby("primary_category")["min_salary_mil_vnd"].mean().idxmax()

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("T·ªïng S·ªë B√†i ƒêƒÉng", total_jobs)
        with col2:
            st.metric("M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu TB", f"{avg_min_salary:.2f} tri·ªáu" if not pd.isna(avg_min_salary) else "N/A")
        with col3:
            st.metric("M·ª©c L∆∞∆°ng T·ªëi ƒêa TB", f"{avg_max_salary:.2f} tri·ªáu" if not pd.isna(avg_max_salary) else "N/A")
        with col4:
            st.metric("ƒê·ªãa ƒêi·ªÉm Ph·ªï Bi·∫øn Nh·∫•t", top_location)

        col5, col6, col7, col8 = st.columns(4)
        with col5:
            st.metric("Danh M·ª•c Ph·ªï Bi·∫øn Nh·∫•t", top_category)
        with col6:
            st.metric("T·ªïng S·ªë Danh M·ª•c", total_categories)
        with col7:
            st.metric("T·ªïng S·ªë ƒê·ªãa ƒêi·ªÉm", total_locations)
        with col8:
            st.metric("ƒê·ªãa ƒêi·ªÉm Ph·ªï Bi·∫øn (%)", f"{location_percentage:.2f}%")

        col9, col10 = st.columns(2)
        with col9:
            st.metric("M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu Cao Nh·∫•t", f"{max_min_salary:.2f} tri·ªáu" if not pd.isna(max_min_salary) else "N/A")
        with col10:
            st.metric("Danh M·ª•c L∆∞∆°ng Cao Nh·∫•t", highest_salary_category)
    
    with tab2:
        st.markdown("##### S·ªë l∆∞·ª£ng tin tuy·ªÉn d·ª•ng theo ng√†nh")
        # Calculate the count of job postings for each category
        category_counts = df['primary_category'].value_counts().reset_index()
        category_counts.columns = ['Ng√†nh ngh·ªÅ', 'S·ªë l∆∞·ª£ng tin']

        top_n_cat = st.slider("Ch·ªçn Top N ng√†nh ngh·ªÅ:", 5, min(30, len(category_counts)), 15, key='slider_cat_count_market')
        if not category_counts.empty:
            fig_cat_bar = px.bar(category_counts.head(top_n_cat), x='S·ªë l∆∞·ª£ng tin', y='Ng√†nh ngh·ªÅ', orientation='h', title=f'Top {top_n_cat} Ng√†nh Ngh·ªÅ Nhi·ªÅu Tin Nh·∫•t', text_auto=True, color='S·ªë l∆∞·ª£ng tin', color_continuous_scale=px.colors.sequential.Blues)
            fig_cat_bar.update_layout(yaxis={'categoryorder':'total ascending'}, height=max(400, top_n_cat*25), showlegend=False, uniformtext_minsize=8, uniformtext_mode='hide')
            fig_cat_bar.update_traces(textposition='outside')
            st.plotly_chart(fig_cat_bar, use_container_width=True)
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ng√†nh ngh·ªÅ.")
            
        # Bi·ªÉu ƒë·ªì Boxplot: M·ªëi quan h·ªá gi·ªØa s·ªë l∆∞·ª£ng b√†i ƒëƒÉng v√† kinh nghi·ªám
        st.markdown('<div class="chart-title">M·ªëi Quan H·ªá Gi·ªØa S·ªë L∆∞·ª£ng B√†i ƒêƒÉng v√† Kinh Nghi·ªám</div>', unsafe_allow_html=True)
        job_counts = df.groupby('min_experience_years')['job_title'].count().reset_index()
        job_counts.columns = ['min_experience_years', 'job_count']
        fig, ax = plt.subplots(figsize=(14, 8))
        sns.barplot(
            x="min_experience_years",
            y="job_count",
            data=job_counts,
            palette="viridis",
            ax=ax
        )
        ax.set_ylabel("S·ªë L∆∞·ª£ng B√†i ƒêƒÉng", fontsize=12)
        ax.set_xlabel("S·ªë NƒÉm Kinh Nghi·ªám T·ªëi Thi·ªÉu", fontsize=12)
        ax.set_title("M·ªëi Quan H·ªá Gi·ªØa S·ªë L∆∞·ª£ng B√†i ƒêƒÉng v√† Kinh Nghi·ªám", fontsize=14, pad=15)
        plt.tight_layout()
        st.pyplot(fig)

        pdf_buffer = save_fig_to_pdf(fig)
        st.download_button(
            label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
            data=pdf_buffer,
            file_name="SoLuongBaiDang_vs_KinhNghiem_Boxplot.pdf",
            mime="application/pdf"
        )
        
    with tab3:
        st.markdown('<div class="section-title">M·ª©c L∆∞∆°ng Theo Danh M·ª•c C√¥ng Vi·ªác</div>', unsafe_allow_html=True)

        # B·ªô l·ªçc danh m·ª•c c√¥ng vi·ªác
        st.markdown('<div class="filter-box">', unsafe_allow_html=True)
        all_categories = df['primary_category'].dropna().unique().tolist()
        selected_categories = st.multiselect(
            "Ch·ªçn c√°c danh m·ª•c c√¥ng vi·ªác (b·ªè tr·ªëng ƒë·ªÉ ch·ªçn t·∫•t c·∫£):",
            options=all_categories,
            default=all_categories,
            key="filter_categories_salary"
        )
        st.markdown('</div>', unsafe_allow_html=True)

        # L·ªçc d·ªØ li·ªáu theo danh m·ª•c c√¥ng vi·ªác
        if selected_categories:
            filtered_df = df[df['primary_category'].isin(selected_categories)]
        else:
            filtered_df = df.copy()  # N·∫øu kh√¥ng ch·ªçn danh m·ª•c, s·ª≠ d·ª•ng to√†n b·ªô d·ªØ li·ªáu

        if filtered_df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi l·ªçc. Vui l√≤ng ch·ªçn l·∫°i danh m·ª•c.")
        else:
            st.markdown('<div class="chart-title">M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu Theo Danh M·ª•c C√¥ng Vi·ªác (Bar Chart)</div>', unsafe_allow_html=True)
            grouped_min_salary = (
                filtered_df
                .groupby("primary_category", as_index=False)["min_salary_mil_vnd"]
                .mean()
                .sort_values("min_salary_mil_vnd", ascending=False)
            )

            fig, ax = plt.subplots(figsize=(14, 8))
            sns.barplot(
                x="primary_category",
                y="min_salary_mil_vnd",
                data=grouped_min_salary,
                palette="viridis",
                ax=ax,
                order=selected_categories if selected_categories else grouped_min_salary['primary_category'].tolist()
            )
            ax.set_ylabel("M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu Trung B√¨nh (tri·ªáu VND)", fontsize=12)
            ax.set_xlabel("Danh M·ª•c C√¥ng Vi·ªác", fontsize=12)
            ax.set_title(f"M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu", fontsize=14, pad=15)
            plt.xticks(rotation=90)
            plt.tight_layout()
            st.pyplot(fig)

            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                data=pdf_buffer,
                file_name="Luong_ToiThieu_TheoDanhMuc.pdf",
                mime="application/pdf"
            )

            st.markdown('<div class="chart-title">M·ª©c L∆∞∆°ng T·ªëi ƒêa Theo Danh M·ª•c C√¥ng Vi·ªác (Bar Chart)</div>', unsafe_allow_html=True)
            grouped_max_salary = (
                filtered_df
                .groupby("primary_category", as_index=False)["max_salary_mil_vnd"]
                .mean()
                .sort_values("max_salary_mil_vnd", ascending=False)
            )

            fig, ax = plt.subplots(figsize=(14, 8))
            sns.barplot(
                x="primary_category",
                y="max_salary_mil_vnd",
                data=grouped_max_salary,
                palette="viridis",
                ax=ax,
                order=selected_categories if selected_categories else grouped_max_salary['primary_category'].tolist()
            )
            ax.set_ylabel("M·ª©c L∆∞∆°ng T·ªëi ƒêa Trung B√¨nh (tri·ªáu VND)", fontsize=12)
            ax.set_xlabel("Danh M·ª•c C√¥ng Vi·ªác", fontsize=12)
            ax.set_title(f"M·ª©c L∆∞∆°ng T·ªëi ƒêa", fontsize=14, pad=15)
            plt.xticks(rotation=90)
            plt.tight_layout()
            st.pyplot(fig)

            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                data=pdf_buffer,
                file_name="Luong_ToiDa_TheoDanhMuc.pdf",
                mime="application/pdf"
            )
    with tab4:
        st.markdown('<div class="section-title">Kinh Nghi·ªám & M·ª©c L∆∞∆°ng</div>', unsafe_allow_html=True)

        filtered_df = df[['min_experience_years', 'min_salary_mil_vnd', 'max_salary_mil_vnd']].dropna()
        filtered_df = filtered_df.replace([np.inf, -np.inf], np.nan).dropna()
        filtered_df = filtered_df[filtered_df['min_experience_years'] <= 5]

        if filtered_df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá cho kinh nghi·ªám t·ª´ 0-5 nƒÉm.")
        else:
            st.markdown('<div class="chart-title">M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu Theo Kinh Nghi·ªám</div>', unsafe_allow_html=True)
            fig, ax = plt.subplots(figsize=(12, 7))
            sns.boxplot(
                x="min_experience_years",
                y="min_salary_mil_vnd",
                data=filtered_df,
                palette="coolwarm",
                ax=ax
            )
            ax.set_title("Ph√¢n ph·ªëi M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu theo Kinh nghi·ªám T·ªëi thi·ªÉu (0-5 NƒÉm)", fontsize=16)
            ax.set_xlabel("Kinh nghi·ªám T·ªëi thi·ªÉu (NƒÉm)", fontsize=12)
            ax.set_ylabel("M·ª©c l∆∞∆°ng T·ªëi thi·ªÉu (Tri·ªáu VND)", fontsize=12)
            ax.tick_params(axis='x', labelsize=10)
            ax.tick_params(axis='y', labelsize=10)
            plt.tight_layout()
            st.pyplot(fig)

            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                data=pdf_buffer,
                file_name="Luong_ToiThieu_TheoKinhNghiem.pdf",
                mime="application/pdf"
            )
            
            st.markdown('<div class="chart-title">M·ª©c L∆∞∆°ng T·ªëi ƒêa Theo Kinh Nghi·ªám</div>', unsafe_allow_html=True)
            fig, ax = plt.subplots(figsize=(12, 7))
            sns.boxplot(
                x="min_experience_years",
                y="max_salary_mil_vnd",
                data=filtered_df,
                palette="coolwarm",
                ax=ax
            )
            ax.set_title("Ph√¢n ph·ªëi M·ª©c l∆∞∆°ng T·ªëi ƒëa theo Kinh nghi·ªám T·ªëi thi·ªÉu (0-5 NƒÉm)", fontsize=16)
            ax.set_xlabel("Kinh nghi·ªám T·ªëi thi·ªÉu (NƒÉm)", fontsize=12)
            ax.set_ylabel("M·ª©c l∆∞∆°ng T·ªëi ƒëa (Tri·ªáu VND)", fontsize=12)
            ax.tick_params(axis='x', labelsize=10)
            ax.tick_params(axis='y', labelsize=10)
            plt.tight_layout()
            st.pyplot(fig)

            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                data=pdf_buffer,
                file_name="Luong_ToiDa_TheoKinhNghiem.pdf",
                mime="application/pdf"
            )


    with tab5:
        st.markdown('<div class="section-title">Ph√¢n B·ªë ƒê·ªãa ƒêi·ªÉm Tuy·ªÉn D·ª•ng</div>', unsafe_allow_html=True)

        st.markdown('<div class="filter-box">', unsafe_allow_html=True)
        locations = df['primary_location'].dropna().unique().tolist()
        selected_locations = st.multiselect(
            "Ch·ªçn c√°c ƒë·ªãa ƒëi·ªÉm (b·ªè tr·ªëng ƒë·ªÉ ch·ªçn t·∫•t c·∫£):",
            options=locations,
            default=locations,
            key="filter_locations"
        )
        st.markdown('</div>', unsafe_allow_html=True)

        filtered_df = df.copy()
        if selected_locations:
            filtered_df = filtered_df[filtered_df['primary_location'].isin(selected_locations)]

        if filtered_df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi l·ªçc. Vui l√≤ng ch·ªçn l·∫°i ƒë·ªãa ƒëi·ªÉm.")
        else:
            st.markdown('<div class="chart-title">Bi·ªÉu ƒê·ªì Ph√¢n B·ªë</div>', unsafe_allow_html=True)

            fig, ax = plt.subplots(figsize=(20, 16))
            y_axis_value = st.selectbox(
                "Ch·ªçn gi√° tr·ªã tr√™n tr·ª•c X:",
                ["S·ªë l∆∞·ª£ng b√†i ƒëƒÉng", "M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu trung b√¨nh", "M·ª©c l∆∞∆°ng t·ªëi ƒëa trung b√¨nh"],
                key="y_axis_location"
            )

            if y_axis_value == "S·ªë l∆∞·ª£ng b√†i ƒëƒÉng":
                counts = (
                    filtered_df['primary_location']
                    .value_counts()
                    .rename_axis('primary_location')
                    .reset_index(name='count')
                )
                counts = counts[counts['primary_location'].isin(selected_locations)]
                # S·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng b√†i ƒëƒÉng t·ª´ cao ƒë·∫øn th·∫•p
                counts = counts.sort_values('count', ascending=False)
                # S·ª≠ d·ª•ng order ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª± ƒë√∫ng
                sns.barplot(x='count', y='primary_location', data=counts, palette="viridis", ax=ax, order=counts['primary_location'])
                ax.set_xlabel('S·ªë L∆∞·ª£ng B√†i ƒêƒÉng', fontsize=12)
                ax.set_ylabel('ƒê·ªãa ƒêi·ªÉm', fontsize=12)
            else:
                if y_axis_value == "M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu trung b√¨nh":
                    grouped = filtered_df.groupby("primary_location", as_index=False)["min_salary_mil_vnd"].mean()
                    x_col = "min_salary_mil_vnd"
                    x_label = "M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu Trung B√¨nh (tri·ªáu VND)"
                else:
                    grouped = filtered_df.groupby("primary_location", as_index=False)["max_salary_mil_vnd"].mean()
                    x_col = "max_salary_mil_vnd"
                    x_label = "M·ª©c L∆∞∆°ng T·ªëi ƒêa Trung B√¨nh (tri·ªáu VND)"

                grouped = grouped[grouped['primary_location'].isin(selected_locations)]
                # S·∫Øp x·∫øp theo m·ª©c l∆∞∆°ng t·ª´ cao ƒë·∫øn th·∫•p
                grouped = grouped.sort_values(x_col, ascending=False)
                # S·ª≠ d·ª•ng order ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª± ƒë√∫ng
                sns.barplot(x=x_col, y='primary_location', data=grouped, palette="viridis", ax=ax, order=grouped['primary_location'])
                ax.set_xlabel(x_label, fontsize=12)
                ax.set_ylabel('ƒê·ªãa ƒêi·ªÉm', fontsize=12)

            ax.set_title("Ph√¢n B·ªë Theo ƒê·ªãa ƒêi·ªÉm Tuy·ªÉn D·ª•ng", fontsize=14, pad=15)
            plt.tight_layout()
            st.pyplot(fig)

            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                data=pdf_buffer,
                file_name="PhanBo_DiaDiem.pdf",
                mime="application/pdf"
            )

    with tab6:
        st.markdown('<div class="section-title">Bi·ªÉu ƒê·ªì T∆∞∆°ng Quan (Heatmap)</div>', unsafe_allow_html=True)
        
    
        st.markdown('<div class="chart-title">Bi·ªÉu ƒê·ªì Nhi·ªát</div>', unsafe_allow_html=True)
        
        corr_cols = ['min_salary_mil_vnd', 'max_salary_mil_vnd', 'min_experience_years', 'max_experience_years']
        corr_df = filtered_df[corr_cols].dropna()
        
        if corr_df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ t√≠nh t∆∞∆°ng quan. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu sau khi l·ªçc danh m·ª•c.")
        else:
            corr_matrix = corr_df.corr()
            
            fig, ax = plt.subplots(figsize=(8, 6))
            sns.heatmap(
                corr_matrix,
                annot=True,
                cmap="coolwarm",
                fmt=".2f",
                linewidths=0.5,
                vmin=-1, vmax=1,
                ax=ax,
                square=True
            )
            ax.set_title("T∆∞∆°ng Quan Gi·ªØa C√°c Bi·∫øn S·ªë", fontsize=14, pad=15)
            plt.tight_layout()
            st.pyplot(fig)
            
            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                data=pdf_buffer,
                file_name="TuongQuan.pdf",
                mime="application/pdf"
            )


    with tab7:
        st.markdown('<div class="section-title">Ph√¢n T√≠ch Song Bi·∫øn</div>', unsafe_allow_html=True)
        
        st.markdown('<div class="filter-box">', unsafe_allow_html=True)
        categories = df['primary_category'].unique().tolist()
        selected_categories = st.multiselect(
            "Ch·ªçn c√°c danh m·ª•c c√¥ng vi·ªác (b·ªè tr·ªëng ƒë·ªÉ ch·ªçn t·∫•t c·∫£):",
            options=categories,
            default=categories,
            key="filter_categories_bivariate"
        )
        st.markdown('</div>', unsafe_allow_html=True)

        filtered_df = df.copy()
        if selected_categories:
            filtered_df = filtered_df[filtered_df['primary_category'].isin(selected_categories)]

        if filtered_df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi l·ªçc. Vui l√≤ng ch·ªçn l·∫°i danh m·ª•c.")
        else:
            num_col = filtered_df.select_dtypes(include=['float64']).columns.tolist()
            feature_x = st.selectbox("Ch·ªçn bi·∫øn X:", num_col)
            feature_y = st.selectbox("Ch·ªçn bi·∫øn Y:", num_col)
            plot_type = st.radio("Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:", ["Scatter", "2D KDE"])

            if feature_x != feature_y:
                st.markdown('<div class="chart-title">Bi·ªÉu ƒê·ªì Ph√¢n T√≠ch</div>', unsafe_allow_html=True)
                fig, ax = plt.subplots(figsize=(12, 7))
                
                if plot_type == "Scatter":
                    sns.scatterplot(
                        x=filtered_df[feature_x], 
                        y=filtered_df[feature_y], 
                        hue=filtered_df["primary_category"], 
                        palette=PALETTE[:len(selected_categories)],
                        ax=ax
                    )
                elif plot_type == "2D KDE":
                    sns.kdeplot(
                        x=filtered_df[feature_x], 
                        y=filtered_df[feature_y], 
                        cmap="Blues", 
                        fill=True, 
                        ax=ax
                    )
                
                ax.set_title(f"{feature_x} vs {feature_y} ({plot_type})", fontsize=14, pad=15)
                ax.set_xlabel(feature_x, fontsize=12)
                ax.set_ylabel(feature_y, fontsize=12)
                plt.tight_layout()
                st.pyplot(fig)
                
                pdf_buffer = save_fig_to_pdf(fig)
                st.download_button(
                    label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                    data=pdf_buffer,
                    file_name=f"{feature_x}_vs_{feature_y}_{plot_type}.pdf",
                    mime="application/pdf"
                )

    with tab8:
        st.markdown('<div class="section-title">Bi·ªÉu ƒê·ªì Xu H∆∞·ªõng</div>', unsafe_allow_html=True)

        grouped = df.groupby("min_experience_years")[["min_salary_mil_vnd", "max_salary_mil_vnd"]].mean().reset_index()

        if grouped.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì xu h∆∞·ªõng.")
        else:
            fig, ax = plt.subplots(figsize=(12, 7))
            sns.lineplot(x="min_experience_years", y="min_salary_mil_vnd", data=grouped, label="M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu", ax=ax, color=PALETTE[0])
            sns.lineplot(x="min_experience_years", y="max_salary_mil_vnd", data=grouped, label="M·ª©c L∆∞∆°ng T·ªëi ƒêa", ax=ax, color=PALETTE[1])
            ax.set_title("M·ª©c L∆∞∆°ng Theo Kinh Nghi·ªám (Bi·ªÉu ƒê·ªì ƒê∆∞·ªùng)", fontsize=14, pad=15)
            ax.set_xlabel("S·ªë NƒÉm Kinh Nghi·ªám T·ªëi Thi·ªÉu", fontsize=12)
            ax.set_ylabel("M·ª©c L∆∞∆°ng (Tri·ªáu VND)", fontsize=12)
            ax.legend(title="Lo·∫°i L∆∞∆°ng")
            plt.grid(True, linestyle='--', alpha=0.7)
            plt.tight_layout()
            st.pyplot(fig)

            pdf_buffer = save_fig_to_pdf(fig)
            st.download_button(
                label="üì• L∆∞u Bi·ªÉu ƒê·ªì D∆∞·ªõi D·∫°ng PDF",
                data=pdf_buffer,
                file_name="LineChart_MucLuong_KinhNghiem.pdf",
                mime="application/pdf"
            )

    with tab9:
        st.markdown('<div class="section-title">Ph√¢n T√≠ch AI</div>', unsafe_allow_html=True)
        
        st.markdown('<div class="filter-box">', unsafe_allow_html=True)
        categories = df['primary_category'].unique().tolist()
        selected_categories = st.multiselect(
            "Ch·ªçn c√°c danh m·ª•c c√¥ng vi·ªác (b·ªè tr·ªëng ƒë·ªÉ ch·ªçn t·∫•t c·∫£):",
            options=categories,
            default=categories,
            key="filter_categories_ai"
        )
        st.markdown('</div>', unsafe_allow_html=True)

        filtered_df = df.copy()
        if selected_categories:
            filtered_df = filtered_df[filtered_df['primary_category'].isin(selected_categories)]

        if filtered_df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi l·ªçc. Vui l√≤ng ch·ªçn l·∫°i danh m·ª•c.")
        else:
            # Ph√¢n t√≠ch d·ª± ƒëo√°n l∆∞∆°ng
            st.markdown('<div class="chart-title">D·ª± ƒêo√°n M·ª©c L∆∞∆°ng</div>', unsafe_allow_html=True)
            salary_model, results, X_test = predict_salary(filtered_df)
            
            if salary_model is None:
                st.warning("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh d·ª± ƒëo√°n l∆∞∆°ng.")
            else:
                fig, ax = plt.subplots(figsize=(10, 6))
                sns.scatterplot(x='Actual', y='Predicted', data=results, ax=ax, color=PALETTE[0], alpha=0.5)
                ax.plot([results['Actual'].min(), results['Actual'].max()], 
                        [results['Actual'].min(), results['Actual'].max()], 
                        'r--', lw=2, label='ƒê∆∞·ªùng l√Ω t∆∞·ªüng')
                ax.set_title('D·ª± ƒêo√°n M·ª©c L∆∞∆°ng T·ªëi Thi·ªÉu (H·ªìi Quy Tuy·∫øn T√≠nh)', fontsize=14, pad=15)
                ax.set_xlabel('M·ª©c L∆∞∆°ng Th·ª±c T·∫ø (Tri·ªáu VND)', fontsize=12)
                ax.set_ylabel('M·ª©c L∆∞∆°ng D·ª± ƒêo√°n (Tri·ªáu VND)', fontsize=12)
                ax.legend()
                plt.tight_layout()
                st.pyplot(fig)
                
                pdf_buffer = save_fig_to_pdf(fig)
                st.download_button(
                    label="üì• L∆∞u Bi·ªÉu ƒê·ªì D·ª± ƒêo√°n L∆∞∆°ng (PDF)",
                    data=pdf_buffer,
                    file_name="Salary_Prediction.pdf",
                    mime="application/pdf"
                )

                # T√πy ch·ªçn nh·∫≠p li·ªáu ƒë·ªÉ d·ª± ƒëo√°n l∆∞∆°ng
                st.subheader("D·ª± ƒêo√°n L∆∞∆°ng C√° Nh√¢n")
                exp_years = st.number_input("S·ªë nƒÉm kinh nghi·ªám:", min_value=0.0, max_value=10.0, value=2.0, step=0.5)
                category = st.selectbox("Danh m·ª•c c√¥ng vi·ªác:", categories)
                location = st.selectbox("ƒê·ªãa ƒëi·ªÉm:", df['primary_location'].unique().tolist())
                
                if st.button("D·ª± ƒëo√°n"):
                    input_data = pd.DataFrame({
                        'min_experience_years': [exp_years],
                        'primary_category': [category],
                        'primary_location': [location]
                    })
                    pred_salary = salary_model.predict(input_data)[0]
                    st.success(f"M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu d·ª± ƒëo√°n: {pred_salary:.2f} tri·ªáu VND")

            # Ph√¢n t√≠ch k·ªπ nƒÉng
            st.markdown('<div class="chart-title">Top 10 K·ªπ NƒÉng Ph·ªï Bi·∫øn</div>', unsafe_allow_html=True)
            skills_df = extract_skills(filtered_df)
            
            if skills_df.empty:
                st.warning("Kh√¥ng t√¨m th·∫•y k·ªπ nƒÉng n√†o trong y√™u c·∫ßu c√¥ng vi·ªác.")
            else:
                fig, ax = plt.subplots(figsize=(12, 7))
                sns.barplot(x='Count', y='Skill', data=skills_df, palette="viridis", ax=ax)
                ax.set_title('Top 10 K·ªπ NƒÉng Ph·ªï Bi·∫øn Trong Y√™u C·∫ßu C√¥ng Vi·ªác', fontsize=14, pad=15)
                ax.set_xlabel('S·ªë L∆∞·ª£ng Xu·∫•t Hi·ªán', fontsize=12)
                ax.set_ylabel('K·ªπ NƒÉng', fontsize=12)
                plt.tight_layout()
                st.pyplot(fig)
                
                pdf_buffer = save_fig_to_pdf(fig)
                st.download_button(
                    label="üì• L∆∞u Bi·ªÉu ƒê·ªì K·ªπ NƒÉng (PDF)",
                    data=pdf_buffer,
                    file_name="Top_Skills.pdf",
                    mime="application/pdf"
                )

    with tab10:
        if not GEMINI_API_KEY:
            st.error("üö® GEMINI_API_KEY environment variable not found. Please set it in your .env file.")
            st.stop()
        else:
            try:
                genai.configure(api_key=GEMINI_API_KEY)
                gemini_model = genai.GenerativeModel(MODEL_NAME)
            except Exception as e:
                st.error(f"Error configuring Google AI or creating model: {e}")
                st.stop()
        st.markdown('<div class="section-title">Ph√¢n T√≠ch AI v·ªõi Google Gemini</div>', unsafe_allow_html=True)
        
        # Hi·ªÉn th·ªã t√≥m t·∫Øt d·ªØ li·ªáu
        st.subheader("T√≥m t·∫Øt d·ªØ li·ªáu")
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**Xem tr∆∞·ªõc d·ªØ li·ªáu**")
            st.dataframe(df.head())
        with col2:
            st.markdown("**Th√¥ng tin d·ªØ li·ªáu**")
            st.write(f"**S·ªë d√≤ng:** {df.shape[0]}")
            st.write(f"**S·ªë c·ªôt:** {df.shape[1]}")
            st.write("**C√°c c·ªôt:** " + ", ".join(df.columns.tolist()))
            # Chu·∫©n b·ªã d·ªØ li·ªáu cho AI
            buffer = StringIO()
            filtered_df.info(buf=buffer)
            info_str = buffer.getvalue()

            # L·∫•y m·∫´u d·ªØ li·ªáu (gi·ªõi h·∫°n 100 d√≤ng ƒë·ªÉ tr√°nh v∆∞·ª£t gi·ªõi h·∫°n token)
            max_rows_to_feed = 100
            data_summary = []
            for i, row in filtered_df.head(max_rows_to_feed).iterrows():
                row_data = [f"{col}: {row[col]}" for col in filtered_df.columns]
                formatted_row = f"Row {i+1}: {', '.join(row_data)}"
                data_summary.append(formatted_row)
            data_summary = "\n".join(data_summary)
            if len(filtered_df) > max_rows_to_feed:
                data_summary += f"\n... (Truncated to {max_rows_to_feed} rows out of {len(filtered_df)} total rows)"

            data_to_feed = f"""
            Dataset Info:
            {info_str}
            
            Dataset Rows (Sample):
            {data_summary}
            """

            # Giao di·ªán nh·∫≠p c√¢u h·ªèi
    
            st.subheader("ü§ñ H·ªèi Google Gemini v·ªÅ d·ªØ li·ªáu")
            user_query = st.text_area(
                "ƒê·∫∑t c√¢u h·ªèi cho AI:",
                height=100,
                placeholder="V√≠ d·ª•: C√°c danh m·ª•c c√¥ng vi·ªác ph·ªï bi·∫øn nh·∫•t l√† g√¨? M·ª©c l∆∞∆°ng trung b√¨nh c·ªßa ng√†nh IT ·ªü TP.HCM?"
            )

            if st.button("T·∫°o ph·∫£n h·ªìi", type="primary"):
                if user_query:
                    with st.spinner("ƒêang t·∫°o ph·∫£n h·ªìi t·ª´ Google Gemini..."):
                        # H√†m generate_feedback
                        safety_settings = [
                            {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                            {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                            {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                            {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                        ]
                        generation_config = genai.types.GenerationConfig(
                            temperature=0.9,
                            max_output_tokens=1000,
                            top_p=0.9,
                            top_k=40,
                        )
                        prompt = f"""
                        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu v√† b·∫°n c√≥ kh·∫£ nƒÉng ph√¢n t√≠ch d·ªØ li·ªáu CSV.
                        D∆∞·ªõi ƒë√¢y l√† m·ªôt t√≥m t·∫Øt v·ªÅ d·ªØ li·ªáu m√† b·∫°n s·∫Ω ph√¢n t√≠ch:
                        {data_to_feed}
                        
                        Query c·ªßa ng∆∞·ªùi d√πng: {user_query}
                        
                        B·∫°n h√£y ph√¢n t√≠ch d·ªØ li·ªáu v√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch chi ti·∫øt v√† d·ªÖ hi·ªÉu.
                        H√£y cung c·∫•p c√°c th√¥ng tin h·ªØu √≠ch v√† c√≥ th·ªÉ bao g·ªìm c√°c g·ª£i √Ω bi·ªÉu ƒë·ªì n·∫øu c·∫ßn thi·∫øt.
                        """
                        try:
                            response = gemini_model.generate_content(
                                prompt,
                                generation_config=generation_config,
                                safety_settings=safety_settings
                                )
                            st.subheader("Ph·∫£n h·ªìi t·ª´ Google Gemini")
                            st.markdown(response.text)
                        except Exception as e:
                            st.error(f"L·ªói khi t·∫°o ph·∫£n h·ªìi t·ª´ AI: {e}")
                else:
                    st.warning("Vui l√≤ng nh·∫≠p c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu.")
                
        

# --- Trang 4: Nh·∫≠n X√©t Chung ---
elif page == "4. Nh·∫≠n X√©t Chung":
    st.header("4. Nh·∫≠n X√©t Chung")
    avg_min_salary = df["min_salary_mil_vnd"].mean()
    avg_experience = df["min_experience_years"].mean()
    top_location = df["primary_location"].mode()[0]
    top_category = df["primary_category"].mode()[0]
    location_percentage = (df["primary_location"] == top_location).mean() * 100
    st.markdown(f"""
    - **T·ªïng Quan v·ªÅ D·ªØ Li·ªáu v√† K·∫øt Qu·∫£ Ph√¢n T√≠ch:**
        - **M·ª©c l∆∞∆°ng v√† Kinh nghi·ªám:** M·ª©c l∆∞∆°ng t·ªëi thi·ªÉu trung b√¨nh l√† {avg_min_salary:.2f} tri·ªáu VND, v·ªõi kinh nghi·ªám y√™u c·∫ßu trung b√¨nh {avg_experience:.2f} nƒÉm.
        - **Ph√¢n b·ªë ƒê·ªãa ƒëi·ªÉm:** {top_location} chi·∫øm {location_percentage:.2f}% s·ªë b√†i ƒëƒÉng, cho th·∫•y s·ª± t·∫≠p trung c∆° h·ªôi vi·ªác l√†m ·ªü c√°c th√†nh ph·ªë l·ªõn.
        - **Danh m·ª•c Ph·ªï bi·∫øn:** {top_category} l√† danh m·ª•c c√¥ng vi·ªác ph·ªï bi·∫øn nh·∫•t, ph·∫£n √°nh nhu c·∫ßu cao trong lƒ©nh v·ª±c n√†y.
        - **Kinh nghi·ªám v√† L∆∞∆°ng:** C√≥ xu h∆∞·ªõng m·ª©c l∆∞∆°ng tƒÉng theo kinh nghi·ªám, nh∆∞ng s·ª± bi·∫øn ƒë·ªông l·ªõn do ·∫£nh h∆∞·ªüng c·ªßa danh m·ª•c c√¥ng vi·ªác v√† ƒë·ªãa ƒëi·ªÉm.
        - **Ph√¢n t√≠ch AI:** M√¥ h√¨nh d·ª± ƒëo√°n l∆∞∆°ng v√† ph√¢n t√≠ch k·ªπ nƒÉng gi√∫p x√°c ƒë·ªãnh c√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn l∆∞∆°ng v√† nhu c·∫ßu k·ªπ nƒÉng th·ªã tr∆∞·ªùng.
    """)
